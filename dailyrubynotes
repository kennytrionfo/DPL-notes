


—————————— FULLSTACK TDD APP FAQS
-CREATE RAILS APP WITH POSTGRES, DEVISE, RSPEC AND BOOTSRAP
-Create rails app (put jason's reference sheet in here)(RAILS APP FAQs)
-Set up Rspec for testing (RSPEC FAQS)
-Create DB with postgresql (??)
-Create Models (MODELS FAQs)
-Create controllers & views (CONTROLLERS)
-Authorization for different role access if needed
-Authentication w Devise if needed
-Put in js with jq if needed
-Style it with Bootstrap

 



Friday June 27, 2014 day 28
review today in mind first.
qustion from Landon - how to test index action with namespacing.
my question about %w:
will return an array of strings. but instead of having to put in commas and quotes etc, it just does it for you.
- %i will be an array of symbols.
- %q will return a string.
let's practice in campus_life. will be good practice on scoping.
—————————— NODE JS FAQS
(come back and review vid if we're gonna really use Node)
programming language like js but it's a server side implementation. it contains things that js does not. js can only be ran on client side and inside of a brower but node can be ran on server side. created to be highly concurrent which means if you have two tasks to do, you can run both at the same time, in parllel. non blocking IO means that two things running at the same time that don't conflict like a notification in chat that other person is typing. sports scores or weathre updating in real time. ruby doesn't do that so well and doesn't scale it so well.
node has a lot like ruby
type "node" into term for it's "irb"
ie 1  + 1
this is a repl where we can test code like irb for ruby.
many functions are similar to js. like "hello".toUpperCase()
to exit control c twice
so you can hop into here if u want to test some stuff ur doing in ur application.
the way you name things is important.
node has modules but they are diff than ruby.
project dir/
new file called Person.js using CAPITAl.
node has exports
the capital P means...
the return value of require
this is how you define classes.
exports.name = 'Kenny T';
exports.age = 32;
exports.hobbies = ['Ruby', 'Node', 'Food'];
exit out and in of node
> var me = require('./Person');
undefined
> me.age
32
> me.hobbies
[ 'Ruby', 'Node', 'Food' ]
comments are //
create new file:
have to be explicit like in js and use return keyword.
just like ruby has gems and can do gem install, node has a package manager called NPMs (node package managers) (like ruby's gems)
—————————— EXPRESS FAQs
(come back and review vid if we're gonna really use express)
let's look at express - a sinatra inspired npm
npm works like gems and bundle together to be careful how you install. install globally means...
check to make sure have npm
npm -v in node
lots of other bootcamps are teaching express rather than rails
going to learn sails.js
node_stuff(master)$ npm install -g sails@0.9.8
...
—————————— SAILS FAQS
(come back and review vid if we're gonna really use sails)
sails lift to start sails server
quite server with control c
generate a new controller is similar to rails. from ur dir:
sails generate controller chats
open chats controller in atom
--challenge:
get sails to connect to postgress and store records in the db








Thurs June 26, 2014 Day 27
—————————— USE RSPEC WITH CONTROLLERS
use campus life project
create a new model called Note
rails g model Note
in it's migration file:
      t.text :text
migrate
update factory/notes
    text { Faker::BaconIpsum.paragraph}
create controller
rails g controller notes
now have controllers folder in spec file
delete notes file in helper folder
spec/controllers/notes_controller_spec.rb
we need to test 7 actions
set up describe for them
start with index action and go down.
describe '#index' do
end

describe '#show' do
end
etc
The index action's purpose is to display a collection of whatever our app has in it so in our index action we put:
  it 'displays a collection of notes' do
  end
so then for us to have a collection, we need to have some notes, so create some notes by inserting before the 'it' statement:
before do
  @note1 = create(:note)
  @note2 = create(:note)
end
or facorygirl comes with a way to make lists and pass in what kind of list or collections were making and how many, so we can instead do:
  @notes = create_list(:note, 3)
So in a controller, we access the index action with a 'get'. when dealing w controller specs, you'll use the http verb you'll normally use to access that controller. so in the 'it' statement:
  get :index
rspec knows that we're inside of a controller cuz of the :type => :controller pair in the Rspec.describe method at the top and it knows we're in the notes controller cuz of the NotesController in that same method at the top. so it know here that get :index means do a get to the notes controller.
When we access the index action there are no requred arguments or parameters that we need to pass.
Now we can do some things to see what kind of response we get. so:
under get :index
  expect(response).to be_success
next, since the code that you would normally use in an index action would be @note = notes.all we tell rspec to look for that by using the assigns method like:
  expect(assigns(:notes))
if you use assigns and pass it a symbol, rspec will look for a symbol of that name and if there is, it'll return the value from the instance variable. so we'll
  expect(assigns(:notes).count).to eq 3
since we created 3 above.
controller specs get indpeth cuz ur doing a lot of stuff. u have to make sure ur doing the request, make sure that the reqeust was successfull so you have to check the server response, you have to make sure that the instance variable returns the thing it's supposed to, and finally you need to make sure it's rendering the right template so for that we can do:
  expect(response).to render_template('index')
put the  , :focus  on this spec
run it - rspec
get an error that there's no route to notes controller and index action so go fix in routes.rb:
  resources :notes
rspec again
error - action index could not be found for notes controller.
so in the notes controller:
  def index

  end
rspec
error action view missing template notes/index.html.erb
so let's create in views/notes new file:
index.html.erb
nothing goes in it, just creating it.
rspec error undefined method count for nil class, means that our assigns(:notes) doesn't exist. So we need to create the assigns(:notes) so:
@notes = Note.all
in the Notes Controller
rspec passing test
now move onto the show action
move , :focus to show
  it 'displays a single note' do

  end
we would normally access the show action with a get so:
  get :show
inside of our ``'it' statement to make the request.
the show action also uses the http verb get. the show action does have the required parameter of id.
So the 2nd parameter that we can pass in after show is a hash and it has to be specific cuz we can only test specific things not dynamic things.
 , id: @note.id
after get :show
for example if we pass in id 16, we should get the product of #16. So we need the exact id of a/the note. to get that we'll need to make one.
so above our it method:
  before do
    @note = create(:note, text: 'my little note')
  end
specify some text in our note by passing in text: 'my little note'
next in our if method:
expect(response).to be_success
expect(assigns(:note).text).to eq 'my little note'
We know that in the show action we usually do something like @note = note.find etc so here we create an instance var called note and we expect that the text of that note to be eq to 'my little note'
then
expect(response).to render_template('show')
rspec error the action show could not be found for NotesController
so add show action in the controller
  def show
  end
rspec error missing template notes show html so let's create in:
app/views/notes/
show.html.erb and add show method
  def show
  end
rspec error undefined method 'text' for nil:NilClass
add @note = Note.find(params[:id])
to show method
rspec passed
now do the new action
min 56
... for new, create and other actions








--Challenge
Do the update spec
hint
after lunch challenge:
Shoutout appllication from yesterday
Users Controller
-index
-show
-new
-create
-edit
-udpate
-destroy
Shouts Controller
-index
-show
-new
-create
-edit
-update
-destroy

-code to add one gem to the group development on the same line.
gem 'spring',    group: :development
-code to add mutiple gems to two groups.
group :development, :test do
  gem 'something'
  gem 'something-else'
  gem 'yet_something_else'
end





Wed June 25, 2014 Day 26
—————————— BUILD RAILS MODEL W RSPEC
--create new rails app (with postgresql)
--cd in
--create ur .ruby-version and .ruby-gemset files
--Point your program to the ruby-made local hosted server
--rake db create
--Install gems & bundle
(if using rspec..)
--Install rspec
--Configure the rails helper.
--Configure application.rb file
--Remove --warnings from .rspec file
--rspec spec/
--Run the test file or rspec (depending on how u set it up)
--Create ur first Model
--Add ur fields (seed ur db) & rake db:migrate
--Set up the attributes of ur Model in the factory & migrate.
--Test ur Model
-Validate stuff (ie. text presence)
-Validate predicate vars like Incomplete?
--Create another Model with fields in migration file and rake.
--Test associations in ur new Model
--Describe ur(write ur specs) validations for the Model in the
--Make specs for ur instance methods.
--Fix away.

we'll rebuild beakr
--create new rails app (with postgresql)
rails new campus_life -d postgresql
--cd in
--Point your program to the ruby-made local hosted server
config/database.yml
host: localhost
rake db create
--Install gems
Gemfile
within a rails app, we'll use rspec rails gem which is a little different but gives us some rails stuff to use. look at on rubygems
add:
  group :development, :test do
   gem 'rspec-rails'
 end
follow online instructions but add in some other gems first
adding pry so we can test in middle of app
added all these in groups:
group :test do
  gem 'shoulda-matcher'
  gem 'database_cleaner'
end

 group :development, :test do
   gem 'ffaker'
   gem 'rspec-rails'
   gem 'pry-rails'
   gem 'factory_girl_rails'
 end
the test group says include these gems in only ur test group, development says include on both development and test. we dont' need any of these for a production environment, just for development and testing.
shoulda-matcher - collection of special matchers that we can use to easily help validate and test models.
databast cleaner - we have a development db (look in db file). when we run tests, we save evertying into a test db. this gem will clean out everything from our test db. it slows us down but it assures our tests are always clean.
ffaker - generates fake data. if u want to generate a random email, street address, person's name, etc can do this w this gem. instead of doing user.create  name = bob, can just pass in faker methods.
rspec-rails - just rspec with some extras
factory_girl_rails - allows u to create new records from ur models. if you say create user, it will set up all ur attributes for you. it will override anything u pass in though.
install more gems
bundle
--Install rspec
from web:
  rails g rspec:install
notice it created a spec helper!
will see spec file in atom with these 2 files
--Configure the rails helper.
(below is incomplete and choppy. see 25w1RspecInModels.MP4 min28)
configure stuff in rails_helper.rb:
add under ActiveRecord... :
DatabaseCleaner.strategy = :transaction
config.include FactoryGirl::Syntax::Methods
under Rspec.configure...
add
  config.filter_run focus: true
  config.run_all_when_everything_filtered = true
above end at bottom
add below last:
  config.before :each do
    DatabaseCleaner.start
  end
  config.after :each do
    DatabaseCleaner.clean
  end
  (see vid 943 for explaination on these)
to know how/what to add like above read documentation
--Configure application.rb file
in config/application.rb, under class Application...
    config.generators do |g|
      g.test_framework :rspec
    end
we have 2 helpes in our spec folder
--Remove --warnings from .rspec file to get rid of warnings in term
in term
--rspec
--Create ur first model
rails g model user
this created a user model
--Add ur fields
in first migration file now add attributes:
      t.string :first_name
      t.string :last_name
      t.string :email
      t.string :encrypted_password
      t.date :birthday
      t.text :hobbies
      t.string :github_username
      t.boolean :active, default: true
spec/ has 2 new folders. factories and models. models is where all models specs will go. user_spec.rb is the same name as primary file above but with _spec. factories defines a factory called user where we can set up the attributes about the user.
--Set up the attributes of ur Model in the factory & migrate.
in factories/users.rb added
attritubes:
vid 10 on adding each of these
  factory :user do
    first_name { Faker::Name.first_name }
    last_name { Faker::Name.last_name }
    birthday { rand(30).years.ago }
    email { Faker::Internet.email }
    github_username { Faker::Internet.user_name }
    hobbies { Faker::BaconIpsum.words.join(', ') }
    active { true }
rake db:migrate
  rails c
  [1] pry(main)> u = FactoryGirl.create(:user)
try:
u.birthday
u.name
etc
will see there is prepopluated info already in there.
by using u = FactoryGirl.create(:user) soemthing... vid 1008
exit
--Describe ur validations for the Model
spec/models/user_spec.rb
delete pending
add
  describe
      it { should validate_presence_of :first_name }
  end
run rspec
lots of errors
now make it pass
app/models/user.rb
  validates :first_name, presence: true
run passed
break
user_spec.rb
      it { should validate_presence-of :last_name }
run
pass
add :last_name to user.rb
run pass
set up a new method in user_spec.rb
1035...
... 1052
install timcop gem
bundle
1055...
challenge:
Test Assignment Model
1. Association to user
2. Validate text presence
3. Incomplete?

projects for end of class:
need to be full scale applications.

Challenge:
Create a shout-out app that has model tests. We're going to be testing our validations, associations, and methods.
The shout out app is going to be very similar to the tweaker app so feel free to use that as reference.

https://github.com/jwoertink/dpl-tweaker

Shout-out app
Models:
	- Users
		○ Validations
			§ First Name
			§ Last Name
			§ Mood
		○ Associations
			§ has_many :shouts
		○ by_mood method
			§ Find user by mood
	- Shout
		○ Validations
			§ Message
		○ Associations
			§ belongs_to :user
		○ Angrify method
			§ Upcases the shout
			§ Adds exclamation points to the end
		○ by_time method
			§ Find shouts posted before a certain tie

Write specs for the validations, associations, and methods of the User and Shout model.




Tuesday June 24, 2014 Day 26
—————————— TESTING FRAMEWORKS FAQS
Test::Unit
The first built in testing library that came with rails. 
Unit tests - test the business logic and functionality of the data models. When you add a method to the model, you should write a unit test to test its functionality. 
Fuctional tests - test the functionality of the controllers. Functional tests help you to ensure that the methods perform as they should. If you were to test a login method, you’d check to see that it will display the login form, enable a user with the proper credentials to log in, and restrict unauthorized users from proceeding through the login process. 
Integration testing - tests the interaction between multiple controllers. In the case of the Railslist application, you can create an integration test that allows a user to sign up for an account, log in to that account, and then create a new clas- sified ad. You are testing the interaction between both the user and classified controller.




Ruby comes with a testing framework called Minitest and the older one called test::unit. lookup on ruby-doc.org. it also comes with rails. but it's not what most rubyists use.

—————————— MINITEST FAQs - personal notes on using MINITEST in rails(October 3, 2014).
Testing FAQs:
Verification testing is where u right tests that wrap about ur code.
Test first is writing a failing test first, then writing code that makes the test pass.
Strict Test Driven Design is where we eventually want to be that is where ur tests really drive the actual design of your app.
Unit testing is testing parts of ur code in isolation so that when one piece breaks, you know exactly what piece it is. This makes it faster and easier to debug. Also good unit tests lead to good documentation. This comes in handy if someone needs to know how a certain block of code works. You may be able to look at the test and get an idea.
Why Minitest?
Minitest is a lightweight testing suite. 
Minitest actually produces skeleton test code for you automatically while you are creating your models and controllers.
Minitest is the test library that comes with rails and that rails uses by default. It's the 2nd generation if you will of the original Unit::Test.
Rails tests can also simulate browser requests and thus you can test your application's response without having to test it through your browser.
You want to set up a dedicated test database which will allow you to set up and interact with test data in isolation.
a spec file (or spec syntax) is used simply for beter readability. specs contain descriptions of behavior that we require. 
test unit uses syntax assert & refute and spec dsl uses must & wont syntax or the asserts..
What to test? Ideally, you would like to include a test for everything which could possibly break. It's a good practice to have at least one test for each of your validations and at least one test for every method in your model.
Validations are done in models and controllers and for models, they validate items by ensuring that only valid data is saved into your database by7 
Moer on validations here: http://guides.rubyonrails.org/active_record_validations.html
You validate using assertions. Assertions are the worker bees of testing. They are the ones that actually perform the checks to ensure that things are going as planned. 
There are a few different types of syntax: 
1. spec descriptions: 
desribe/do with it/do. ie: 
require "minitest/autorun"
desribe fizzbuzz do
  before do
    @fb = FizzBuzz.new
  end
  it "some desriptions here of what it should do" do
    assert some_objet_here
  end
end
specs use must and wont 

2. Use MiniTest::Test class and def to define your tests as methods beginning with `test_`. ie: 
require "minitest/autorun"
class TestMeme < Minitest::Test
  def test_that_kitty_can_eat
    assert_equal "OHAI!", @meme.i_can_has_cheezburger?
  end
end

3. ActiveSupport::TestCase class and test/do.  ie: 
require 'test_helper'
class PostTest < ActiveSupport::TestCase
  test "some description of what is should do" do
    assert something_here
  end
end


Steps:
1.rails new testing_basics

rake minitest to test 
rake minitest:models to test just models
gem install ZenTest to use ZenTest that will autorun test upon saving a file to prevent having to go back and forth. 





—————————— RSPEC FAQs
We're gonna use RSpec. people like it over the others cuz they are structured and it's like running a mini program while rspec is written more for behavior driven development, more like a story. rspec.info. js jasmine website is a nice looking landing page. Then there is cucumber language which is more everyday language for people like biz dev or marketing people to use to do some testing.
—————————— CODE KATA FAQS
a marial arts kata is a specific set of moves that you do over and over and memorize. Code Kata is the same thing. Taking a bit of code and writing it over and over again to solve that problem until it's memorized. codersdojo.com
—————————— CHALLENGE: DO A KATA
-make new dir:
-set up 4 files: Gemfile(add gem), main file, spec file(require ur main file and helper), helper file.
-run to see if runs the test suite:
-write ur top level describe block/method/command: using rspec's dsl, write our top level mini block, describing what we're trying to test.
-create the constant:
-Add an intention expression: a statement to express intent: (this is from http://blog.davidchelimsky.net/blog/2007/05/14/an-introduction-to-rspec-part-i/)-Create ur first method/mini block: to test something by going inside of ur top level describe block, and using describe again, inside of a string, using '.' cuz it's a class, name ur method that will test whatever it is that u need to test and write your block with ur it/do string statement and expectation of what we want our new method to do when we pass in an arugument.
-follow the errors and fix:
-refactor: look for instances of where ur using the same bit of code twice or more, then create another describe block below your current '.callout' describe method to take the place of ur count % 3 == 0 code and count % 5 == 0 code that is duplicated.

-make new dir:
mkdir project_name
-set up 4 files: Gemfile(add gem), main file, spec file(require ur main file and helper), helper file.
new file Gemfile
source "https://rubygems.org"
gem 'rspec'
bundle
when we're setting up katas, we need gem file, main file and then usualy an associated spec file. named the same thing but with _spec and a file called spec helper.
and:
require 'rspec'

RSpec.configure do |c|
  c.color = true
  c.filter_run focus: true
(let's us use the focus method to focus in on one block of code.)
    c.run_all_when_everything_filtered = true
(says that if we don't add a focus to anything, it'll run our whole test suite.)
  c.formatter = :documentation
(add a formatter. there are many diff formatters. this :documentation formatter allows us to write into our code what we're doing in a story format that shows up in your feedback in the term to better help you undersand what's going on)
end
there's lots of options on how to configure rspec. we're saying if things fail red, pass green and we'r adding a focus to be able to run a specific thing in stead of how thigns.
next set up ur main & spec files:
fizz_buzz.rb
and
fizz_buzz_spec.rb
in spec file:
require_relative 'spec_helper'
require_relative 'fizz_buzz'
run from katas dir to see if runs the test suite:
should see:
Run options: include {:focus=>true}
All examples were filtered out
Finished in 0.00037 seconds (files took 0.09111 seconds to load)
0 examples, 0 failures
-It ran the test suite in .0003 seconds, 0 examples, etc.
steps again:
start, create gem file. add rsepc to have access, bundle, crate spec_helper file. will always be spec_helper. can even put this file into others, spec helper lets us reaqurie spec helper and config it, next created the actual program file and the spec for that file, (review vid 9:54), spec_helper requrie spec and main file and done.
rspec uses it's own dsl (domina specifc langue) sinatr was one. all defined in mini blocks. rspec starts out , top level is describe block, what this file is trying to test. start with this and tell it what to describe.
-write ur top level describe block/method/command:
we decide what to call it. vid 9:56
in fizz_buzz_spec.rb:
  describe FizzBuzz, 'a fun drinking game' do

  end
This is how we do all katas. our code goes in the block.
betterspecs.org for good habits for katas, syntax, rspec commands and code examples. look up other cheatsheets and helps online for rspec. we're using v3.0.
run again error message. learn how to read them!
atas/fizz_buzz_spec.rb:4:in `<top (required)>': uninitialized constant FizzBuzz (NameError)
this tells us FizzBuzz doesn't exist, so we need to make it exist.
in fizzbuzz.rb file:
    class FizzBuzz

  end
run works
fizz_buzz_spec.rb:
inside this class, we'll use one method. instead of a constant or something, we just pass a string. If ur describing a method, if it's an instance method use
#method_name
if it's a class method use:
.Method_name
we need to have a method that will count which number we are on and return what the actual method will be. ie if we pass 1 it returns 1, 2 returns 2 etc. We can name this method anything we want.
So to describe our callout class method:
describe '.callout' do
  it 'takes the number 1 and returns 1' do
  pending 'has not been implemented yet'
  end
end
the inblock of code tells us what it should be doing and also tells us its pending if it didn't happen.

added to helper file:
  c.run_all_when_everything_filtered = true
  # if you don't add any focus to anything, it'll run the whole test sutie
  c.formatter = :documentation
  # this is just a formatter
this allows us to write out our story and write out our specs and it'll write out the story for us.
spec.rb
remove the pending line in inner block so we can start writing code.
let's write our expectation. our expecation is that when we call this class method callout, and we pass it the number 1, it should return #1. so it looks like this:
expect(FizzBuzz.callout(1)).to eq 1
the argument that we're passing in to the expect method is the:
FizzBuzz.callout(1)
So we're expecting the return value of this method to = 1 (.to eq 1).
-follow the errors and fix:
# and . for
add something under pending so that it shows up better in term
         something here that means nothing fr pending
add a few more configurations:
spec helper.rb
fizz_buzz_spec file remvoe pending lines
clean up code
refactor the whole thing to be by three and five to be a single method.
End up with new methods:
    describe '.by_three?', :focus do
      it 'takes the number 3 and returns true' do
        expect(FizzBuzz.by_three?(3)).to eq true
      end
      it 'takes the number 4 and returns false' do
        expect(FizzBuzz.by_three?(4)).to eq false
      end
    end



Monday June 23, 2014, day 25
Active record enum - You take an array... vid 9:06
—————————— ENUM FAQS
Enum is an active record. It takes an integer field, you specify an array of values and it maps each value in each index field to a number that it will store in an integer. for ex:
say ur working on a membership model, you could do:
class Membership
enum plans [bronze, gold, platnum ]
end
so plans would be an integer field here. and the enum takes each one of the index fields, converts it to the value of it's index (ie. 0,1,2) and stores it in the method plans. it also kinda masks that number because it would be hard to remember , if you said that the value of plans is 1, it's hard to know what that value actually means, so it kind of overrides the method to say "plans will return gold" or "plans will return bronze" etc and behind the scenes it just knows that it's one of those integers. when you have a field that's an integer in your database, it's much faster to query on then also using symbols is a lot cleaner than using messy stings etc. You also get all kinds of predicate methods like @member.gold? which would return true if the plan was 1 so you can say "if the membership is gold" then do something like present special features or something. You can use enum for doing user roles,


—————————— TESTING FAQS
tdd or bdd is a paridigm that's out there.
tdd-test drivin development. bdd-behavior driven development. no diff between the two. TDD-you write the test first before the app even exits. I expect it to look like this and do this. duck-typing is "if it walks like a duck, chances are it's a duck". So the first time you write code, you write it to make the test pass. then you have solid code.
google tdd life cycle. graph. url (pathfindersolns.com...)
google tdd wikipedia.
google unit testing. wikipedia. testing one aspect of your app like your methods.
google functional testing. wikipedia. testing to see "does this product function?"
google testing types. wiki. integration and validation testing.
so tdd, bdd, unit, functional, integration and validation testing.
Let's start writing a few tests.
cd ruby_stuff
mkdir simple_tests
make a new file testing.rb
let's write a method that returns true or false depending on if test passes.
def expect_equal(a, b)
  a == b
end
we want to grab result of this so:
result = expect_equal(1,1)
if result
  puts "test passed"
  else

  puts "test failed"
  ends
ruby testing.rb in term
returens - test passed
change 2nd 1 above to be '1'
run again in atom:
test failed cuz integer 1 is not equal to string 1.
write another test above result line
def expect_not_equal(a, b)
a != b
end
run ruby testing.rb again in term:
let's create a new file.
math.rb
class MathStuff

  def self.add(this, that)
    this + that
  end
end
in testing file at top:
require_relative 'math'
we want to test that this method does that we think.
in testing.rb
above result:
added = MathStuff.add(1,1)
(we expect this to be 2)
result = expect_equal(added, 2)
ruby testing.rb in term:
passed
because we know the test passed, the value of result was true. so our method in math.rb passes. it does exactly what we expect.
another one:
in testing.rb;
16-
added2 = MathStuff.add(10, 10)
result = expect_equal(added2, 20)
run test in term (ruby testing.rb)
passed
we now know it works for single and double digits but you have to account for as many scenarios as you can so let's test for a few more.
another:
added3 = MathStuff.add('5', '5')
result = expect_equal(added3, 10)
run test
failed
this is where life cycle come in.
so update code now.
in math.rb
convert to integers by:
this.to_i + that.to_i
run - passed
Now everything passes so we can go refactor if want to but let's run some mroe tests.
we know we can add fixed nums and strings. let's try:
added4 = MathStuff.add(2.5, 2.5)
result = expect_equal(added4, 5.0)
run failed
math.rb
we're convering to integers bu tif pass in a float it fails so:
this.to_f + that.to_f
run passed
-Refactor and optimize your testing:
now we're only runnign the final test or the last test that we run, not all of them. we need to see if our changes affect our other tests so let's refactor. every time we run a text, let' s put the value of that test into a n array so we can see if each index is true and if so, then the whole array is true. if it's false, then one is off.
in testing.rb
line 11:
results = [] (above first added)
change teh = to << in all of the results lines below.
so we want to test if any value is false. if all are true, whole text passes.
so below in if, else statement:
abvoe if result below:
result = results.collect {|r| r if r == false}.compact
The above says:
collect all the results and collect all the values in this array that are equal to false. So if the return of the array is empty, that means that there were no false values. So again, we're going to iterate over this results array, and collect every value that is = false, and then we're going to return an array of all the false values.
(i want to collect the resultif hte result is f. use compact method to remove all nills)
change if result to:
if results.empty?
so we're going to iterate over it and collect all falst values. so we want an empty result array.
run failed
it's saying that some reults were false. we know that some failed but let's see how many failed.
2nd puts, changed to:
puts "#{result.length} tests failed"
run 4 tests failed
we need to fix our method to make all these tests pass. we need to be able to account for two fixnums, two strings should work, and two floats should be equal to a float.
math.rb
we don't want ot convert this and that to integers cuz that failed before for some of the variables.
changed the this and that to this.to_f and that.to_f
vid 10:07 for some changes above.
run passed
actually can shorten above to:
result = results.any? {|r| r == false}

then changed the results var line to:
results = results.all? {|r| r == true }

create new file colors.rb
class Colors
then create an allowed colors constant:
  ALLOWED_COLORS = [
    'red',
    'yellow',
    'blue'
]
  def self.add(color1, color2)
    if ALLOWED_COLORS.include?(color1) &&
      ALLOWED_COLORS.include?(color2)
      if color1.eql?('yellow') && color2.eql?('blue')
        return 'green'
        end
    end
  end
end
this will simulate if we add 2 colors together if we get  a diff color
comment out math results in testing file.
at top
require_relative 'colors'
below remed out resuts:
write test:
color = Colors.add('yellow', 'blue')
result = expect_equal(color, 'green')
run pass
change color line to caps
color = Colors.add('Yellow', 'Blue')
run failed
what do we do? .capitalize? where?
in colors.rb file somewhere.. .
put .downcase behind all the color1's and color2's.
run passed
after break
jer's going to make tests and we have to make them pass.
vid 11 for solution

you want to write the least amount of cde possible to get test to pass. all you care about is the test passing.
go back and review youtube vid as mine ran out of battery between 11:30-noon.
include is used for modules so we need to make a module





Fri June 20, 2014 Day 24
—————————— AUTHORIZATION FAQS & NAMESPACES ——————————
Authorization is just assigning roles or clearance level to a user. ie. customer vs. website admin. Could even have different levels for customers. Like various plans. ie free level, platnum, bronze etc.

—————————— CHALLENGE:  add customer and admin roles to the DPL STORE:
-Add a user account system to the dpl store.
-Add in roles in the user so we can have a customer role and an admin role within the user.
-We want a customer to be able to login and see the items they purchased and an admin to be able to manage the products we sell.

-add gems:
in Gemfile:
gem ‘bootstrap-sass’
gem ‘font-awesome-sass’
gem ‘devise’
-bundle

—————————— DEVISE FAQs
Do devise stuff. follow documentation github
rails g devise:install
will see these instructions in term:
=======================================================================

Some setup you must do manually if you haven't yet:

  1. Ensure you have defined default url options in your environments files. Here
     is an example of default_url_options appropriate for a development environment
     in config/environments/development.rb:

       config.action_mailer.default_url_options = { host: 'localhost:3000' }

     In production, :host should be set to the actual host of your application.

  2. Ensure you have defined root_url to *something* in your config/routes.rb.
     For example:

       root to: "home#index"

  3. Ensure you have flash messages in app/views/layouts/application.html.erb.
     For example:

       <p class="notice"><%= notice %></p>
       <p class="alert"><%= alert %></p>

  4. If you are deploying on Heroku with Rails 3.2 only, you may want to set:

       config.assets.initialize_on_precompile = false

     On config/application.rb forcing your application to not access the DB
     or load models when precompiling your assets.

  5. You can copy Devise views (for customization) to your app by running:

       rails g devise:views

=======================================================================

follow these instructions in term:

number 1 in term:
put #1 code in bottom of config/envitronments/development.rb
step 2 in term instructions:
put root url in ...
3. flash notices.
(these are rails built in helper methods.)
??
<p class="notice"><%= notice %></p>
<p class="alert"><%= alert %></p>
vid
4nothing
5. we’ll do last
-Create a User model:
rails g devise User
rake db:create (if this app is built from scratch)
in migration file in db/migrate:
rem out trackable
rem in confirmable
rem out confirmation token index in the group at the bottom. ‘add_index :users, :unlock_token,..”
above t.timestamps:
add:
t.string :name, null: false
(an index is a way to speed up a specific query. and indexed column is the fasted column to query. usually we’ll queary on the primary_id column. So when we want to auth a user, we look them up by email so we want ot make sure the emails are indexed. that’s what the last two “add_index” lines are...)
-Now add our roll.
(can call this field whatever make sense to us but field must be integer.)
t.integer :role, null: false, default: 0
(can have as many rolls as you want. start with 0 and go up. ie. 0 customer, 1-admin, 2-super admin etc)
-let’s add an index for doing queries
(if you ahve a foriegn key, always index it. and if you query on a specifc column, index that too. those are rule of thumb).
bottom of add_index list below:
add_index :users, :role
(don’t want it to be unique)
Go edit model (let's do this before we rake migrate to avoid some potential errors and issues that we ran into yesterday)
Models/user.rb
remove :trackable and add :confirmable
rake db:migrate
(shouldn’t have to create cuz this dpl store is an older app)
Still following and looking at instructions on github:
rails g devise:views
rails s
web localhost:3000  /users/sign_in should see sign in.
-Add login link to top:
layouts/applicatoin.html
in <nav> add to end of list of link_to’s :
<%= link_to(‘login’, new_user_session_path) %>
views/devise/registrations/new.html
add:
<div  <%= f.label :name %><br/>
	<%= f.text_field :name %>
  </div>
to the top of fields
git instructions - strong params. copy code.
applications_controller:
put at top:
before_action :configure_permitted_paramters, if: :devise_controller?
in the method below private:
devise_paramter_sanitizer.for(:sign_up) << :name
web rf /users/sign_up  should work
Haven’t done the authorization stuff
user.rb
below divise:
enum role: [:customer, :admin] (this could have all of the ruby syntax ({}) etc)  (this is how you set up authorizations)
web sign up as a customer
in term, in serv log  (development log file) will see “Sent mail to .... “ message. a way to verify email was sent and what all the instructions are etc. This will be different for all of us.
Take the url (don’t copy quotes too) that is inside of the href and put inside browser and rf and should say “Your account was successfully confirmed.”
web try to sign in should see “signed in successfully”.
term kill server
rails c
User.count should see 1
u = User.first and u.name should get name
The enum did more than just give us our roles. We have a predicate method based on what our role is.
u.customer? returns true
u.role doesn’t return the integer 0 but “customer”
Integer fields are the fastest queryable field so rails translates string into integer.
u.admin? false
Edum gives us 2 scopes that we can use to get info on each of our roles. WE also get instance predicate methods for finding out if our object falls under that particular role.
User.customer or User.admin
Customer can’t sign out. let’s fix
get out of console and rails s
We need link to change depending on if we’re signedin or not
application.html:
above last link_to in nav:
<%  if user_signed_in?%>
<%  else%>
<%= link_to(‘login’, new_user_session_path) %>
<%  end%>
web rf should have login and logout
under /products we have edit and delete, don't’ want customers to do those.
products/index.html:
delete link_to create, edit and delete product
rf /products  those links shouldn’t be gone
/products/new we can see that we can make a product but we need to tell rails that we don’t want them to get to this page.
routes.rb
resources :products will generate all of our restful actions like edit , create, destroy etc. but we only want show and index (to see all products)
add ,only: [:index, :show] to the end of the resources line
web rf should get routing error cuz it thinks we’re trying to go to show action cuz the only route we have is/products/id
Even though we have those pages in our app and controller, customer can’t get to them which is good.
Let’s assume we have a secret store that you have to be signedin as amember.
products_controller.rb
at top:
before_action :authenticate_user!  (this is from git documentation)
rf users/sign_in  says “you need to sign in” also /products page too.
on /products page sign in should be able to see products.
Now need to create admin section.
logout
create admin namespace:
routes.rb
above end
namespace :admin do  videxp
next
   get ‘/’ => ‘base#index’
create a controller
rails g controller admin
now create the base controller, but it’s namespaced
rails g controller admin/base (we’re specifying that we want to create a basectonroller within the admin namespace)
look at this term notes. new folders!
controllers/admin/base_controller.rb
We don’t want to inherit from application controller so:
at end of <  AdminController (so class Admin::BaseController < AdminController at top)
next add:
def index
end
views/devise/admin/base/
create index.html.erb
<h1>Admin Dashboard page</h1>
rf /admin/ should see above
let’s secure it
admin_controller.rb
before_action :authenticate_user! (add to the class)
rf should say “You need to sign in”
if you sign in as a customer can still see admin
admin/controller.rb
next:
before_action :ensure_user
private
def ensure_user
redirect_to root_path, alert: “oh no you di’nt” unless current_user && current_user.admin?
end
rf 3000 should be logged out and on homepage
Still don’t have a way to create an admin, only customers.
rails c  (creating a user in the console when using devise might be tricky, but you’ll need to know how to do this w/o documentation)
user = User.new
(what are the four fields that our signup field has? name, email pw, and pw confirmation so when creating a user in console, we have to mimic that)
user.name = kenny
user.email = kenny@kenny.com
user.password = “password”
user.password_confirmation = “password”
(our user doesn’t actually have a password column, just an encrypted pw field. whenever creating a user in rails c or seeding it in atom, ur mimicking that sign up process. )
Set the role for what the admin is. Now it’s customer
user.role = :admin (not setting the integer, just the symbol for which role it is)
user.save got error didn’t save
user.confirm!  (will just make them confirmed)
user.persisted? true  (asking is this method saved in the db?)
user.admin? true
exit
rf user/sign_up
sign in with the admin info you just created in the console
/admin should work.
We have 2 users, a user and an admin and only admin can access admin section. only one has authorization to get to admin.
Challenge:
Want to be able to do all our restful actions from the dashboard area.
Make the restful actions for the product all scoped inside the customer area.
What the first thing you need to do?
add routes to link to page
how do u make all restful actions? resources

routes.rb (how do I get restful actions for a particular controller?) We want ot create routes in the admin section.
in the  namespace method and under the get ‘/’ =>’base#index’
resources :products (this gives you all restul actions (routes). index, show, edit, new, create, destroy)
rake routes
now we have to create an admin/products controller (do it the same way we created the base controller above) rake routes also tells you what controllers and actions you need to create. everything inherits from the admin_controller.
Vid walking through together
Make sure routes are set up.
did the resources and rake stuff above.
Create a controller becusase an admin/producust contrlle rdoesn’t exist
controllers/admin/
creaet a new products_controller
class Admin::ProductsController < AdminController
end
views/admin/
add products_controller file (for veiws)
Can copy and paste from other products_controller file and put in this one.
?? updated some code vid
copy 4 files from products folder and paste in ??
Im out. - vid

CHALLENGE:
Build the beaker app
Course:
Has a name with a start date & end date. It has many users.
User:
Has a name, devise fields for authorization stuff, course_id (which belongs to course), a role [:student, :staff]. Staff doesn’t need to belong to a specific course.
Routes:
2 sections.
Regular section and staff section.
Staff - authenticate staff.
Should be able to do all crud actions for courses & users inside staff section.
Inside route section:
if I log in as a student should be able to see course, name, start date, end date.
Use bootstrap to make it look pretty.






Thurday June 19, 2014
—————————— Tweaker app ——————————
in term: rails -v
* note: done * rails new tweaker -d postgresql
host: localhost in db yml file
make sure postgress is on.
in Gemfile:
at bottom-
gem 'bootstrap-sass'
gem ‘devise’ (our cheater gem that will create authentication etc)
save atom and bundle
Look up device documentation on rubygems / github page. This gem is modular which means it has many pieces and can be used like legos and can be added to as needed very easily. it has many modules in it and they alld o something different. The first, “database authenticatable. Omniauthable requires other gems but this one let’s you authentication from other websites like fb and twitter. This uses a system called Oauth.
A session begins when you access a website. Rails has a session object and it works the same way params does, it’s just a hash so we can put key value pairs into it. Session works like a cookie. Params only goes from one use to another but session carries throughout the whole time ur on the site.
-Go down to Getting Started
in term, in tweakers dir:
rails g devise:intall
(this generates the devise gem)
-look at text it shows in term: 1.”Ensure you have defined…”
-copy the “config.action_mailer...” code under #1, add to config/development.rb file at the bottom
(this line of code is to do email stuff. confirm email address by sending email or reset pw etc. devise will do for us)
#2 in notes in term: (won’t use this example ‘root’ code)
-in config/routes.rb:
delete comments
root ‘static_pages#index’
#3. (these are rails built in helper methods.)
copy both lines,
app/views/layouts/application.html.erb:
just above yield, paste them.
4. (we’re not using heroku. we’ll skip this)
5. (not going to runthis step yet, will come back later)
back to github instructions. - rails g devise MODEL (this is where we need to decide the name of the model. ORM is active record, it says if ur using active record i’ll create migrations, if not, wont’)
in term:
rails g devise User
(that created some models and other stuff)
-take a look at the migration file it created for us: db/migrate - gives us email, encrypted_password. both are null false & default. these are some of the 10 modules of devise on the hithub site.
-comment out the Trackable. we won’t need for tweaker.
- uncomment the Confirmable code.
-let’s give our users a name:
under lockable: and above t.timestamps:
t.string :name, null: false
t.string :avatar_url
-an index is a way to speed up a specific query. and indexed column is the fasted column to query. usually we’ll queary on the primary_id column. So when we want to auth a user, we look them up by email so we want ot make sure the emails are indexed. that’s what the last two “add_index” lines are.
-uncomment the 3rd “confirmable” add_index line.
(if you ahve a foriegn key, always index it. and ifyou query on a specifc column, index that too. those are rule of thumb).
-rake db:create (cuz we did yml file)
-rake db:migrate (that created table and all indexes for us)
term:
rake routes
(we dfined the bottom one only (root get  /) but look at all the others that devise did fo rus.
-generate static pages:
-term:
rails g controller static_pages index
-to to routes.rb and delete the top line that was just made by doing generate controller.
-rails s.
-localhost: 3000  (should see home page)
-/users and /users/sign_in should also work.
-create an acount by putting in emails and “pass” as pw.
(should get “1 error prohibited..” error)
-try something crazy for pw and something different for pw confirmation. device shoule tell you.
-put in good pw, hit sign up. error ActiveRecord::Statement
We need to add the name in.
-on git hub rails g divise:views
-kill server and put in:
rails g devise: views
(creates app/views/devise folder)
-take a look at folder. .
-new.html.erb:
(it’s using form_for.  the “resource_name will return a …???.
-add name field:
-below first paragraph:

<div>  <%=  f.label :name, autofocus: true%></div>  ???
<div>  <%=  f.label :name, autofocus: true%></div>  ???

rails s
-3000/users/sign_up should have a signup field. enter good pw. get error
Anytime we do a create method we have to do a strong parameters. Devise doesn’t knwo to add the name into the strong params. we need to tell devise to allow that field.
-on git - Strong Parameters section: we’re dealing with sign_up. let’d do First block of code.
-application_controller file:
put in:
before_action: configure_permitted_parameters, if: devise_controller?
put the private… code below “protect_from_” line:
private
def configure_permitted_paramters
	devise_paramter_sanitizer…..      add  “<< name”  in at end.
-rf browswer. put in pw etc - another error “undefind method ‘current… “
Looking at migration file. can see that trackable commented out. devise needs to know not to use it.
-models/user.rb:
delete   :trackable and add :confirmable from commented out stuff above.
srf page - another error
-rake routes
Can see that method should be called new_user_confirmation_path. (we generated our routes and it looked at user model to see what it should call stuff and generated it, then we altered it)
-the top line shows where the error exists. _links.erb is a partial.
shared/_links.erb:
-on line 14:
change method from ???. (add user  to:  new_confirmation_path  after new)
rails s
rfpage - worked.
-input info, hit sign in. should work.
-go to sign in page and sign in with current email. get message “you have to confirm ur account”. (system didn’t actually send email but we want to see email)
term: scroll up in server log a
-open a new tab in term.
-rails c
let’s find user:
User.count
u = User.first
u.name
u.email
u.encrpyted_password
u.confirmed? (false)
u.confirmation_sent_at (nil, which means never got the confirmation)
u.confirmation_sent_at = Time.current
u.confirmed_at
u.confirmed_at = Time.current
save record after updating these fields:
u.save
u.confirmed? (true) user is now officially confirmed.
exit
browers sign in. try to sign in - should get “sign in successfully”
/user/signin redirects you to home page “you are already signed in”
We can’t log out.
app/views/layouts/applicatinon.html:
above bottom body tag:
<%=  link_to(‘Home pasge’, root_path)%>
<% if user_signed_in? %>
<%= link_to(‘Edit Account‘, root_path)  %>
	???

<%= yield %>

-assests/stylesheets/application.css - remame to .scss
-delete what was thee and add @import “bootstrap”; on top line.
rfrsh page
need to add avatar, url and name:
-views/devise/registration/edit.html.erb
above  f.label (:email) on line 9:
<div >
 	<%= f.label(:name) %> <br/>
 	<%= f.text_field(:name) %>
</div>
<div >
 	<%= f.label(:avatar_url) %> <br/>
 	<%= f.text_field(:avatar_url) %>
</div>
We added fiels to edit form but now we need to do strong params.
-git page: read about account_update
-controllers/application_controller:
repeat bottom “devise_paramerter.. “ line to this:
devise_parameter_santizer.for(:account_update).concat([:name, :avatar_url])
-page: try it. should get “you updated yoru acount succesfully”.
-try logout button: error “no route matches [get] for “/users/sign_out”
-layouts/application.html:
on link_to for logout: put method::delete  before end of )???
page - signout should work
-goto bootstrap and crate navbar:
-same file: under “alert” line:
<nav class =”navbar navbar-default”>
innext line link_to  put (‘Tweaker’, root_path, ???
-More bootstrap and css from here…???

-sign back in. should work. sign out.
-next, create our next model.
-So a user has many hits and a hit belongs to a user.
rails g scaffold Hit message:string user_id:integer
open last migration file:
line 5 (t.integer :user_id)   add - , null: false to end
below first end:
add_index :hits, :user_id
end
-rake db:migrate
-web   /hits - shows “Listing hits”
we need to secure this controller
-controllers/hits_controllers.rb:
at top on line 2:
before_action :authenticate_user!  (added this line bfore line 2 )
save, web users/sign_in  - that whole controller is secure. can’t do anything unless signedin.
sign in to account and go to /hits
models/user.rb:
has_many :hits
models/hits.rb:
belongs_to :user
back to controller above:
in new method:
@hit = current_user.hits.build
in create method:
@hit = current_user.hits.build(hit_params)
in set_hit method:
@hit = current_user.hit.find(params[:id])
in hit_params:
remove :user_id from params
page  hits/new - don’t want “user” field
app/views/hits/_form.html.erb:
remove something???
line 16 change text_field to text_area
page - make a message
Style it with css
push to github

—————————— How to link comments ——————————
what will we need? post id. so let’s build a new model
rails g scaffold Comment author message:text post_id:integer
when linking things together, 1set up post id. 2. set up routes
in routes.rb - scope resources by:
resources :posts do
	resources :posts do
	resources :comments
end
-rake routes to see new routes in term.
#3. for rails to understand the relationship between these two models? belongs_to
associations go in the model
-go to models/post.rb
has_many :post
-in comment.rb
belongs_to :post
-seed some stuff:
in seeds.rb:
Comment.create(author: “George Bush”, message: ‘I really am crazy’ , post_id: 1)
Comment.create(author: “Barrack Bush”, message: ‘I so high’ , post_id: 1)
-rake db:migrate
-rake db:seed
-rails c: Comment.all to see sql of all
-@post
-@post.comments should show all posts with comments.
made a bunch of associations in the console..
-quit console
-edit post page to have list of comments on bottom:
-views/post/show.html.erb/:
<% @post.comments.each do |comment| %>
<h3><%= comment.

author %></h3>
<p><%= comment.message %></p>
-check page. should be two elements.
-add dependant destroy to model:
-in models/post.rb ??? …




Wed June 18, 2014 day 22
-PARAMS REVIEW
-TABLE ASSOCIATIONS REVIEW
example of associations:
Understanding Associations in rails
- Also nested models

1. Take 2 models
2. Associate them
3. Ensure database has association columns needed
4. Scope routes
5. Use the scope in your controller

Example:
class Meat
  belongs_to :sandwhich
end
class Sandwhich
  has_many :meats
end

$ rails g migration add_sandwhich_id_to_meats sandwhich_id:integer

resources :sandwhiches do
  resources :meats
end

class MeatsController
  before_action :find_sandwhich

  private
  def find_sandwhich
    @sandwhich = Sandwhich.find(params[:sandwhich_id])
  end
end
-REVIEW ROUTES
-REVIEW RAILS QUIZ
--BUILD A BLOG
-in term: rails new blog -d postgresql
- create ruby version and gemset from term:
atom .ruby-version and atom .ruby-gemset
-make it so these can be used by cding out and in:
cd blog
-git init, add, commit, push. also create repo on github.
-cd into dir blog
for model you need what models? comments and post models
-rails g model Post title author description:text   (string is default for 1st )
-bundle
-if you have mysql instead of postgres, change it to “pg” in the gemfile folder
-rake db: create and migrate
-rails c to confirm it looks good.
-Post.all to see them.
- to make sample data go to seed file. in seeds.rb:
Post.create(title: ‘my first post’, author: ‘kenny t’, description: ‘this is a cool blog’)
past a few more times:
(title: ‘my first post’, author: ‘kenny t’, description: ‘this is a cool blog’)
(title: ‘my second post’, author: ‘kenny t’, description: ‘this is a cool blog’)
(can also do this from console)
-in term: rake db:seed
-checkto make sure worked - rails c - Post.all (should see sql)
-quit console
-git push
now with one model, we have to build controllers and views.
-rails g controller Posts index show new edit
let’s work on index page frist. what do have to do to get index page up and running?
-controllers/posts_controller.rb:
<h1>Posts</h1>
<% @posts.each do |post| %>
<h1><%= post.title%></h1>
<h2><%= post.author%></h2>
<p><%= post.description%></p>
<br>
<% end %>
-to start app rails s
-run rake routes to check routes
-change routes file to:
resources :post
-rake routes again  and should see updated routes
-localhost: 3000/posts in brwser
-in show folder:
<h1><%= post.title%></h1>
<h2><%= post.author%></h2>
<p><%= post.description%></p>

--CHALLENGE:
-Create a static home page:
in config/route.rb -  root 'static#home'
sv, rails s, go to localhost: 3000
-Create a global navbar in your layout:
gto views/layouts/application.html.erb
under section - div class = "row", withing that class - div class = "col-sm-12", go to bootstrap page to find documentation about it.
-Add a link to the home page
-Add a link to the noms page
-Fix the style on the show page
-Fix the style on the edit / new pages



Tuesday June 17, 2014 Day 21
—————————— BOOTSTRAP ——————————
9:53 for new rails foodie application
-Sass is kind of a programming language that makes CSS better.
-look up and bookmark foundation as a bootstrap comparison
- fontawesome for fonts

Vid m
connect bootstrap using cdn (content delivery network) on their website or download it if needed.
Bootstrap system uses a 12 column system and block spacing.
Bootstrap just adds a class to your normal css and it adds a whole new style. you don't need to write any new css code.
Create a rails app using bootstrap:
-  g new model Foodie
-  into foodie
- open in atom
- go to Gemfile to add gems. below the sass-rails gem add 'bootstrap-sass' in sing quotes.
- update the gem file log by saving it in atom and bundling. This will go back through all gems and update them all.
- Sass = syntactically awesome style sheet. Sass is a css pre-processor. a different syntax for writing css and then prior to compiling .css the pre-processor runs through it and turns it into css. it give us the ability to do some things that we usually can't like setting variables cuz ti's closer to a programming language. you can set functions, mthodds, set ariables, if statements, math equations. Bootstrap is built using LESS pre-processor but we're not going to use it cuz it'll require us to intall a number of other gems, so we'll use sass.
- use a scaffold generator to be quick: in term:
rails g scaffold Nom name:string delicious:boolean
- make sure db is configured - host: localhost in database.yml file.
- rake db: create
- rake db: migrate
- rails s
- go to localhost: 3000/noms
should see Listing noms etc
-insert a food. do a couple of them.
 non of the styling on there is our bootstrap styling, just default.
- get rid of hte scaffold - app/assests/stylesheets/application.css and get rid of all but require_tree and require_self lines. these 2 lines are called manifest. the stylesheet manifest. the mainfest in rails is part of the asset pipeline which is a structure where you can put these assest (ss and js) into folders and thye have a purpose and then rails can find them and run them though preproseccors like sass and LESS. so by including our sass preprocessor (that rails did for us) and if we put our sytlesheets in the asset pipleine we can use sass and rials will automatically run it through the preprocessor and convert it to css. we have to convert to css cuz browswers don't undertand sass or less. so if we want to use other types of css we have to run them through a preprocessor so they convert into css. we've actually been using a diff preprocessor, erb. so we've taking our erb template and run it trhough oru prepocessor and it kicks out html. so the asset pipeline has a gem called sprockets which reads the manifest and figures out how to compress all these different stylesheets. we have 3 diff sytlesheets now. so sprockets reads the manifess which says 'include everything that's in this folder' (requrie_tree) and after that, include the current file.  so the 'require_tree' part of the manifest is saying 'include the other two files in the stylesheets/ folder' one has nothing. other has a lot. we'll remove this file?? by deleting the first line of manifest (require_tree).
- refresh browser.
now no styles are being used. this allows us to use bootstrap.
-include bootstrap - in applications.css file: @import "bootstrap"; on top line above manifest.
-refresh
nothing happens
-rename the application.css file to conform to sass - rename to add .scss on the end is all.
-delete the first.
-now can delete rest of manifest. why?
-save and refresh
new style!
-style page -
bootstrp gives us styels.
-open views/noms/index in h1 tag - class = “page-header”, save, rfresh
-in table tag - class = “table table-striped”, sv rf,
-make links look like buttons - in link_to destroy button - after } - , class: ‘btn btn-danger’ which makes it a button and a red button. sv rf,
-move button at bottom to top by just moving line to top of page.
-turn into button - after new_non_path, ‘btn btn-success’. btn makes it button, the 2nd makes it green.
-move this button to right - after btn-success - pull-right
-move it away from edge - go to application file in layouts/, make <section> tag around the yeild and in it - class = “container”. this moves it in.


- vid after mbreak - more on bootstrap nom site, pagination,
CHALLENGE:
-Create a static home page
-Create a global navbar in your layout
-Add a link to the home page
-Add a link to the noms page
-Fix the style on the show page
-Fix the style on the edit / new pages
-jasoncarter@outlook.com

Monday June 16, 2014 Day 20
—————————— APPLICATION PLANNING ——————————
-Start with a name. Understand what problem you’re trying to solve! You should be able to go to anyone and say “The name of my app is ….  and the goal of it is ….”. Consider writting down and memorizing a mission statement. Start with an MVP, Minimum Viable Product, which is the absolute most basic app you could build that works, so you can test it. An MVP isn’t pretty and doesn’t do much but it works on a very basic level. Application versions have 3 numbers. ie. M.m.b. 2.1.2. The first # is Major version. Beta is where just a few pple use it but it’s not official or public. Start by creating a feature list of all possible features. Number or mark them. Then create and MVP list. Then put time frames to eveything. Once you have the features, then we start building code. We ask:
-What are our Models? ie. user. So what are all the different aspects of “user”? ie. name, email, active or not etc. Then determin the field type for each of those. ie. string, string, boolean etc. We can see that objects are relational so we’ll need a relational DB. Therefore we’ll need Rails. So our tools list will be rails, ruby etc. Then we go to things like what controllers we’ll need etc. We’ll also then go to what the interface will look like. Use balsamiq.com for wireframing.
CHALLENGE:
New app name: Theater Express
Concept: Allows you to find plays within theaters by searching theaters and see what times they are playing.
-Create feature list:
Save fav theaters
Search feature
Theater data
Enter new data
Change data
Delete data
User account
Sort

-Sort the feature list to create the MVP.
Bold above

-Sort the remaining features to create subsequent releases.
rest above

-Plan out all MVP objects (i.e. models and attributes)
Theater DB:
 -Theater info: name, location, list of plays,
Play DB:
 -Play info: name, time, description, theater, length,
User Act:
 -Name, user name, pw,

-Gather list of tools needed to build MVP
 Rails DB, html,

-Discuss UI and user flow with mocks.
Website: simple blog format list style of Theaters with plays listed under them with data under them.
Admin page: Form with Title, location, Times, descriptions for both Theaters and plays.





Friday June 13, 2014  Day 19
Building an app! controllers, link_to, views etc. 

-Use
validates :name, prsences: true
validates :email, uniqueness: true
validates :password, min_length: 6
Rails validations are using .blank which is a combination of .nil? and .empty?
The opposite of .blank? is .present? These are predicate methods. So the presence: true above is just using this .present with "validates presence of"
Can do all kinds of validations like above. 
routing and routes and rake routes review.

-Vid all morning..






Thursday June 12, Day 18
—————————— review
another way to search in db:
animal = Animal.where(id: 1)
returns on the one record with the id of 1 but it's still an ActiveRecord::Relation collection
sql still returns a collection cuz all it knows is it's doing the .where command but rails is smart and gives us an alternate way of searching using .find and it will find only that id that we're looking for. this is also the fastest query.
but if we do animal = animal.find(50) and there is not an animial with id 50, rails blows up but we can use rescue to fix this. rescue is a ruby thing.
  begin
    puts "trying to do stuff"
  rescue
    puts "there was an error"
  end
so when our app tanks like this, it's bad. we want the app to throw an error not tank. remember when looking at error messages, they always show the name of the class that throw that error.
So you can go get that error message (in irb here):
ActiveRecord::RecordNotFound
and do:
begin
  animal = Animal.find(50)
  rescue ActiveRecord::RecordNotFound
  puts "could not load animal"
end
which will prevent the app from crashing but will throw the error message that you put in there.
try to pluralize your where queries to help find your object.
.find is pretty magical..
rails does some cool things here..

—————————— CONTROLLERS FAQs
Controllers are ruby classes but they don't really act like classes.
the MVC fits inside of an overarching resource. the resource is based on whatever our model is. say it's animal. so the controllers are animals (plural) and the views are animals_views
resource examples then would be like animal, trainer, owner etc. resources is just a concept, not a programming class/method/function etc.
so when we do rails g scaffold, we're really telling rails which resource to generate.
Routes are how the urls are specified for the views talking to a particular controller.
let's create a new app called dpl_store
-rails new kens_store -d postgresql
-create a develop branch to work on.
git checkout -b develop
-generte a model for ur products
rails g model product
-add attributes to ur product in ur migration file
t.string :name, null :false
t.float :price, default: 0.0
t.string :sku
t.boolean :in_stock, default: true
t.text :description
-configure db so that rails knows how to access it  - host: localhost
-create & connect db to rails:
rake db:create and migrate
-seed db. in seed.rb
Product.create(name: 'DPL shirt', price: 14.99, sku: 'dp123', description: 'cool shirt')
create 1 or 2 more
rake db:seed
-create ur controller:
rails g controller products
set up an action to show all the products:
go to routes file
we can do
resources :products
which generates all the routes for us

—————————— RAKE ROUTES FAQs
http://guides.rubyonrails.org/routing.html
get-get a resource. forexample just viewing something. ie getting a product from the server to view.
post-post a new resource. ie - adding a new product to the server.
patch - taking a resource and updating it a bit.-put-your updating the entire resource itself.
delete - deleting an entire resource.
this is called REST. folling this pattern to connect everything. representation state transfer. google it.
prefix-is a prefix to a method that will return a string to the uri pattern. there are 2 methods that get generated for each method that return the uri. the _path or _url that will return the URI Pattern. If the uri has a pattern and the variable (ie.:id) is not optinal, you have to supply the variable for taht uri pattern cuz rails doesn't know which id pattern ur talking about.
the diff between _path method and _url method that you get with each prefix is that the _path method is going to be a relative url. the _url is going to be an absolute url. relative means relative to domain. these are all relative. absolute means the absolute or whole entire address ie. http://something.com/something/id  etc.
generally inside of ur app, u'll be using _path. _url is used for something like using emails that ur sending to customers.
Any action that does a get should relate to a view. if your app has 4 get verbs in your resource, you should have 4 views. and the name of ur page should be what ur action is.

-pushed to github using git push origin develop. * also set up a branch on github called develop. review that.
- any action that do a git, those actions should reflect a view.
- rails s to boot up server.
-go to localhost: 3000/products/

-for erb comments use: use a ruby comment '#' to comment out inside of of the erb tags instead of the equals.
-use raise to raise an error and as a method to debug. it stops the application at this point.
-putting 'private' in your products_controller file means that all methods below that are methods and not actions and are not public and can only be instantiated insdie the class.
- review all morning until 2:20 pm of June 12, 2014.

--CHALLENGE:
-Create a new rails application called student_union.
-Generate a Student model with a name and course attributes.
-Create and migrate your database.
-Generate a Students controller with index, show, new and create actions.
-In your students views folder create show, new, and index views.
-Edit your routes file so that your student views are accessible. (Resources)
-Edit your views:
 -The index view should list all of the Students with their name and course. The index view should also have a link to your new view, and each student should have a link to their show view.
  -The new view should have a form for creating a new student.
  -The show view should show the selected student with their name and course.
Model should be Student
 - student.rb
Controller should be Students
 - students_controller.rb
 - in that file: StudentsController
Views folder should be Students

-Set the root of your site to be the students/index page.
-In your model, validate the presence of the name and course attributes.
-Update your controller with the edit, update, and destroy actions. You'll need to look this up as we haven't covered it, but it's pretty straight forward.



Wednesday June 11,  Day 17
SQL_find_by Controllers DPLstoreApp Routes Controllers strong params create vs save vs new
-Vid: first 15 min-review of Joining tables.
—————————— MODELS (from mvc)
-create new model using postgres as db
-Set configuration settings so Rails knows how to connect to our db. database.yml file
-rake db:create and migrate
-from dir use rails to create a migration to add columns to db
-from dir create a mig to a column in db
-remove, add & rename a column from db using ruby code in mig file
-rake db:migrateca
-double check with psql to make sure table looks good.
-add 3 columns (w rows(attributes)) to our db in the seed file:
-tell rails to add all of this to the db:
-go into the rails console (our sandbox) & use .count .first .where .limit .where().count ruby methods on the Model:
-call .where on the Model to find a name:
-chain .limit to see how many:
-pass 2 arguments to where to find 2 attributes:
-call .count to see how many fit that criteria:
-do 2 different 'like' queries using a string instead of a hash:
-add another argument to ur query:
-add .count onto the end of that multi-argument query to see how many records match that query:
-set the name ur looking for to a var and use the unsafe way of using string interp to pass a dynamic var into our sql:
-change the var name and try it again:
-Use rails sanitized method for taking arguments and repeat above:

The name of your model will be the singular version of something.
A model is just a ruby class. the attributes in a model describe the characteristics of the model. Model is singular, the table is the pluralized version of the model. ie:
tree, trees
book, books
-create new model using postgres as db
rails new sandbox -d postgresql
Each attribute has a format to it.
We dont' have to define attr_accessers cuz in rails they automatically inherit from active record base that does that for us by looking to see what the name of the model is, connects to the database, looks for a table with the pluralized version of the model name, and then reads the table to find all of the columns and then automatically creates an attr_accesor for each one of the columns.
To create that table in sql, we use sql commands like create etc but in rails we use ruby migration code.
rails g model Animal
rails creates the migration file with the table in it.
the t.timestamps is really the created_at & updated_at. the primary key for the table items is also created automagically when we create the table.
Active record migration converts what we do in our migration file and puts it in the sql db for us. Migration is a rails class. google Active Record Migrations for more.
-Set configuration settings so Rails knows how to connect to our db. database.yml file
-rake db:create and migrate
db:migrate basically tells rails to run the code in the method in the migration file that we just created.
Inside of development(under development section) host: localhost
-hop into postgresql console to describe(look at ur db):
psql -d sandbox_development (this name is found in the database.yml file in the development section.)
\d (stands for describe) animals shows our table. our 100 limit on breed and other things are now in there thanks to simply ruby code.
exit postgresql with /q
another thing we can do with our db through this Ruby Migration Class might be adding another column to our animals table.
Every time we make a change in our db through sql code using our rails app, we're going to create a new migration. when we create a model, the model runs the migration for us cuz it knows we need to run some sort of sql code. but we already have a migration so we need to generage a new migration seperately.
-from dir use rails to create a migration to add columns to db
so rails g migration and name the migration very explicitly so
rails g migration add_columns_to_animals
if we look at our new migration file we'll see we have a new class AddColumnsToAnimals with a new instance method called change with nothing in it.
if you make a mistake you can do rake db:rollback to undo the last thing you just did.
add a new column to the db using ruby code in the mig file
let's add a boolean sex to our animals table
to add a new column add in the change method:
  add_column :animals, :hungry, :boolean, default: true
rake db:migrate
we realize we need to make a few changes.
-from dir create a mig to a column in db
rails g migration change_columns_for_animals
will see in bottom file in migration files.
-remove, add & rename a column from db using ruby code in mig file
we want to remove the last column we did so in our change method:
remove_column :animals, :hungry
also let's rename column
rename_column :animals, :born_on, :birthday
add another column:
add_column :animals, :trained, :boolean, default: false
we can do as many migrations as we want and don't have to make all of these changes in one migration
-rake db:migrate
-double check with psql to make sure table looks good.
psql -d sandbox_development
get out of psql
-add 3 columns (w rows(attributes)) to our db in the seed file:
animal = Animal.new
animal.name = "Fluffy"
animal.save
but a faster way is to pass in a hash of key value pairs with their attributes' names and values like:
animal = Animal.new(name: "Fluffy", breed: "Poodle", species: "Dog", age: 3, birthday: 3.years.ago, trained: true)
animal.save
we can make it even shorter with the create method:
Animal.create(name: "Fluffy", breed: "Poodle", species: "Dog", age: 3, birthday: 3.years.ago, trained: true)
create will instantiate the class, set up all the attributes, and then call save for us.
now we haven't actually done anything with this file yet.
-tell rails to add all of this to the db:
rake db:seed
-go into the rails console (our sandbox) & use .count .first .where .limit .where().count ruby methods on the Model:
rails c
yesterday to get a count in sql we did select count(*) from Animals
in rails we can just take the name of our Model(table) and call the .count on it.
Animal.count
that gives us some sql
Animal.first
when using the where method, we can just pass a hash
Animal.where(name: "fluffy")
sql will always return a collection unless you limit it to 1.
notice it doesn't return an object but an ActiveRecord::Relation which isn't an object but a collection. the ActiveRecordRelation has a bunch of methods called in it and it allows us to chain queries together. so now we can do this: chain em..
-call .where on the Model to find a name:
-chain .limit to see how many:
-pass 2 arguments to where to find 2 attributes:
-call .count to see how many fit that criteria:
-do 2 different 'like' queries using a string instead of a hash:
Animal.where(name: "fluffy").limit(1)
the limit method is part of the ActiveRecord::Relation so we can chain more stuff to this command if we want.
-add another argument to ur query: 
Animal.where(name: "fluffy", age: 3)
-add .count onto the end of that multi-argument query to see how many records match that query:
Animal.where(name: "fluffy", age: 3).count
\d to see Schema
to see the timestamps of each version of the table migrations, from ur directory: select * from schema_migrations:
Rails checks with this data everytime yo do rake db:migrate to make sure it doesn't already exit. So if you make a mistake AFTER you've done a rake db:migrate you can't change it (by doing a rake db:drop for example), you have to create another migration to change it.
You could rollback though

--CHALLANGE:
from the rails console, create 5 more animals in the db
Animals.create(...same format as what we did in seed file)
end challenge
still in rails c
do a 'like' query using a string instead of a hash:
Animal.where("name = 'fluffy'") or
Animal.where("name LIKE 'fluffy%'")
Inside this ruby string is raw sql
to set the name ur looking for to a variable:
name = "Fluffy"
and because we're in rubyland, we can do string interpolation
-set the name ur looking for to a var and use the unsafe way of using string interp to pass a dynamic var into our sql:
Animal.where("name LIKE '#{name}%'")
which lets us use a dynamic name variable or something and pass it right into our sql.
-change the var name and try it again:
name = "Kitters"
and run that same query again, we'll get a diff value
WE have one prob with this though. -Don't mix ruby with raw sequal. it's called a sql injection where people can take out your sql and put in their own sql.[[]]
Rails has fixed this. rails takes the ruby string that looks like sql and creates a placeholder for where the variable is going to be. that placeholder is a questionmark. this makes sure that it's sanitized sql and not sql from the user.
-Use rails sanitized method for taking arguments and repeat above:
For each questionmark that you have as a placeholder, you add an additional method to the where method for what that thing is:
name = "kitters"
Animal.where("LOWER(name) LIKE ?", "#{name}%")
date query:
Animal.where("birthday < ?", 1.year.ago)  (note we used the ? again. ..)
Animal.where("birthday < ? AND name = ?", 1.year.ago, "Fluffy")
because we used 2 ?s, we have to pass in 2 arguments.
for more on ActiveRecord Querying and methods:
http://guides.rubyonrails.org/active_record_querying.html

—————————— RELATIONAL DATABASES
one to one, one to many, one to many.
Create a trainer model and create a one to many relationship between ur models.
rails g model Trainer
in migration file:
t.string :name
but now that we want to associate animals to this trainer, we have to add the trainer_id to all the animals table:
rails g migration add_trainer_id_to_animals (use singular trainer)
go to migration file and add
add_column :animals, :trainer_id, :integer
rake db:migrate
we need to make sure rails knows there's this association:
in the trainer model. trainer.rb
has_many :animals
in the animal model. animal.rb
belongs_to :trainer
more on vid about working in db in both rails and the rails console..

--challenge:
-create additional trainers
t = Trainer.create(name: 'Guido')
-add animals to trainers
d = Animal.new(name: 'Doogy', breed: 'Poog', species: 'Dog', age: 4, birthday: 7.years.ago, trained: true)

a1 = Animal.first

To put students into Students table
go into rails console ("rails c" from irb) and type:
Student.create(:first_name => 'Jason', :last_name => 'Carter', :state => 'Washington', :favorite_color => 'Purple')


—————————— CREATING A NEW RAILS APP USING SCAFFOLD FAQs ——————————
Steps:
1.Create new projects/app:
In terminal, from the directory you will crate it in(ie.sandox) type:
rails generate model Model_name first_name last_name state

7. Scaffold.
In term type: "rails generate scaffold "Name" (use capital, ie 'Tasks') : 'string' and repeat for wanted items. ie:
rails generate scaffold Task name:string date:string importance:string
8. Rake.
In term type: rake db:migrate in the direcotry your file is in. Should see..?? == 20140610002740 CreateAddresses: migrating ==================================
-- create_table(:addresses)
   -> 0.0021s
== 20140610002740 CreateAddresses: migrated (0.0022s) =========================
(this syncs rails with the server)
9. goto to routes.rb file in the config folder  and type in "root "tasks#index"" below the current code with "tasks" being the word after resources above. - this makes "tasks your homepage"
10. restart server by typing 'rails s' in the term while in the directory.
11. go to url and do localhost:3000 and should be there.
12. Stop the app from running by hitting control+c in the terminal.
13. CD .. out of your app's directory.
14. delete the app and do it again by typing "rm -rf my_task_app/" into the terminal.
-Use rake db:rollback to rollback a mistake.





Tuesday June 10, 2014 Day 16
—————————— SQL with Postgres ——————————
FACTS:
Steps:
-make sure postgres elephant is running.
-From terminasl run: psql -d your_database 
- the name of this can be found in db.yaml file
- leave the console with a "\q"
- to see what tables exits: \d
-we must always set our table name as singular cuz rails makes it plural.
-schema_migrations -
-to describe a table: "\d 'animals'"
-Modifiers are...
-Not Null is the first modifier and can never be null. The ID field can never be null. we can add 'not null' to any column we want.
-The 'default nextval' looks up what's in () to the right and looks to see what the last ID was, increments it by one and sets it as the default. We won't be using this method.
-character varying(255) means it can take any type of characters up to 255.
Do some querying:
-If want to see all of the date: "select * from aminals;". Really means "select all of the columns from the aminals". or "I want to return eveyr column that matches my query". so by not specifiyign anything, it returns everything.
-in sql these are main 4 commands: C R U D - Create, read, update, delete.
-the select above is a read.
-Do: "select * from aminals where id=3;" to return all of the columns that match this query which is id of 3.
-sometimes in documentation, you'll see the sql commands in all caps like: SELECT * FROM aminals WHERE id=3;
-when searching for a string use single quotes:
-use "like" to search something generally.
-use % at the end of Class to allow anything after this word.
-Can also put it at the front which means, we know what end means. ie. %Aminal.
-and can put on either side when you only know what's in the middle somewhere.
-this equery is case sensative.
-you can alter data and query that changed data - ie. use "lower" to put namesinto lowercase.
-to know how many records match our query:
-to return specific values: select name from aminals or select age from aminals;
-elephant_development=# select name from our aminals where age >= 3 and age <= 5;
- select name from aminals where lower(species) = '%species%';
- select created_at from aminals; - to find when records where created.
-to query time stamps: select name from aminals where extract(hour from created_at) < 10;
-select id, name from aminals where extract(hour from created_at) < 10;
-created_at and updated_at get inserted by railsby :
elephant_development=# update aminals set created_at=now(), updated_at=now() where id=12;
- \d cars describes the table for us.
-Two types of keys: Primary & foriegn.
STEPS TO CREATE A NEW TABLE:
elephant_development=# create table cars(
elephant_development(# id bigserial primary key,
elephant_development(# make varchar(20) not null,
elephant_development(# model varchar (20) not null,
elephant_development(# year integer,
elephant_development(# condition text,
elephant_development(# for_sale boolean defalut true,
elephant_development(# created_at timestamp,
elephant_development(# updated_at timestamp
elephant_development(# );
Add a new car:
insert into cars(make, model, year, condition, for_sale, created_at, updated_at) values('bugatti', 'one', 2015, 'good', true, now(), now());
How many cars total do I have?:
select count(*) from cars;
How many cars do have that are older than 2005?:
select make, model from cars where year < 2005;

CHALLENGE:
-Create a table with everyone's info in it from class.
-find everone who's last name begins with V:
select * from students where last_name like 'V%';
-Everyone from the state of Utah:
select state from students where state = 'Utah';
-Everyone with fist name David:
select first_name from students where first_name = 'David';
-In your Aminals table, create a student_id column.
alter table aminals add column student_id integer;
-Add your student_id to one of the cars:
update aminals set student_id=6 where id = 15;
Join
 -Join the students and cars table with the student_id foreign key.
select name, breed from aminals inner join customers on aminals.id = customers.aminals_id;
-Add a birthday column to the students table.
alter table students add column birthday timestamp;
-Upate each student with their birthday as a datetime.
update students set birthday='1993-04-19'::timestamp where id=1;
Selecting all students who were born April 19th, 1993.
extract(year from birthday)
-To delete a table:
drop table cars

-Selecting all student who were born before 1980.
select * from students where extract(year from birthday) < 1980;

-Select all students born after 1985.
select * from students where extract(year from birthday) > 1985;

-Select all students born in October.
select * from students where extract(month from birthday) = 10;

-Select all students named David who were born after 1988.
select * from students where extract(year from birthday) >1988 and first_name = 'David';
-Select all students who were born between 1980-1990.
select * from students where extract(year from birthday) between 1980 and 1990;
-Select all students named Jason, Justin and David using an array.
select * from students where first_name IN ('Jason', 'Justin', 'David');
-Delete birthday column.
alter table students drop column birthday;
-Delete Jason row.
delete from students where first_name = 'Jason';
-Delete your state.
update students set state = '' where id = 6;
Group by:
-In a GROUP BY statement only distinct values are shown.
-Give a count of how many of each first names there are, by first name.
select first_name, count(state) from students group by first_name;
Where:
-Specify the condition or predicate.
-Kind of like an if statement, your trying to describe something where it's either true or false only.
select * from students where state = 'Virginia';





Monday June 9, 2014 Day 15?
—————————— DATA STORAGE ——————————
FACTS:
-Review database videos from lynda.com
-3 places for Data: File system, Memory & Databases.
-File system is more local and temp. It's slow. yaml files are stored on files system. normal text files etc.
-Memory is also shorterm but is fast.
-Databases- Is a program and is saved like a program. The files that a database creates are not flat files like on a file system so they are more efficient. The most stable way to store data and most secure.
-Sometimes you'll use a combination of these 3 to store data or all 3.
-Some database types:
SQL (structured query language)
-SQL is acutlaly a programmig lagnuages.
NoSQL databases are NOT RELATIONAL. You can't tie them together so you have to do 2 seperate queries and get 2 datasets. NoSQL databases are really fast cuz their optimized for reading data. So they're good to use when your reading data that isn't relational.
Graph-Java heavy. Not a sql and not a nosql. they are unique. (New4j, Oracle Spatial, Titan)
-A node is a circle. An Edge is  a line. Edges connect to lines.

-Programs used to access DBs are:
-MySQL- old, original big boy. Lots of people use it.
-PostgreSQL ("postgres")- new kid on block.
-SQLite3- We've been using this for our Rails stuff. Small and lighter.
-SQLServer-A Microsoft product. Used for large enterprise, ASP type programs.
hw-read up on sql and mysql a bit online. and postgresql as well.
-More on PostgreSQL:
-Has a lot of features that mysql doesn't have.
HStore- is a giant Hash. a big key/value store. It lives in memory so you can put stuff in and out of it superfast so you can cache ur application which is fast so u can have more users using it.
GIS Geospatial- lets you use location.
Full-text search-

-Created a new rails app:
—————————— Josh left: ——————————
Animal
-Rails gives us an "ID" and "updated_at" and "created_at" fields/columns by default. This is great info to have.
-Call .save to save our cat info
-Use a = Animals.first to retrieve our first line in our table.
Class challenge:
add 9 more aminals:
1. create a new aminal by: frog = Aminal.new
then create it's attributes by:
frog.name = "something here"
frog.age = 2
frog.breed = "something here"
etc

-rails new <elephant> -d postgresql ('elephant' will now show up as a new folder in your projects directory)
From the "elephant directory" - rake db:create
From the "elephant directory" - rails generate scaffold Animal name:string etc..
- rails console (starts the rails console?)
- cat = Animal.new
- cat.breed = "fat"


-resources: dochub.io for getting documentation
-join js meetups and html

———————— ATOM HOTKEYS ————————
Select multiple similar words
command + d

Global find and replace - all files in dir
Command + shift + f

Delete a word at a time backwards
option + delete

Local find and replace - local file only
command + f

Transpose characters either side of cursor
ctrl + t

Hotkey erb shortcuts
control shift .

Toggle command palette
shift + ⌘ + p

Show available auto-completions
ctrl + space

Use selection for find
⌘ + e

Tab a selection
command [ or ]

Indent/outdent the current line
⌘ + ] / [

Insert new line before the current line
⌘ + shift + enter

DELETE TEXT TO BEGINNING OF WORD
option + backspace

DELETE THE CURRENT LINE
ctrl + shift + k

DUPLICATE THE CURRENT LINE
shift + ⌘ + d

JOIN CURRENT AND NEXT LINES
⌘ + j

Select the current word/token
⌘ + d

Select the current line
⌘ + l

Select to beginning/end of word
option + shift + left/right

Select to first/last character of line
shift + ⌘ + left/right

shift + ⌘ + up/down
Select to top/bottom of document





Day 14 - June 6, 2014
————————HOW THE INTERNET WORKS ————————
hyper text transfer protocal, domain name system etc. See June6 vid hr1

FACTS:
RDBMS - Relational Database Managemnt System - a place to put your data. Looks like a spreadsheet.
NGINX - web serber program and take raw html, js, css etc and giving it to browser. web server sits between rails and the website. nginx is like our webbrick that we're using now. apache and others are other servers.
-when you visit a webpage, ur downloading all the files.
-resources: dochub.io for getting documentation
-join js meetups and html
-sinatra is a dsl for creating mini programs. rails is a full-stack web application framework.
-rails has a way to talk to a database but sinatra does not.
-REPL -  stand for read, evaluate, print, loop. irb, js console and pry are all
-other MVC framworks:
NodsJS(express, sails), python(cake, fuel, symphony, kohana)
-MVC - Model View Controller - It's just organization. Where to put your code so it will work well.
-CoC - Convention over Configuration - rails wants you to do things a specific way, all of us, and get the same results.

—————————— SCAFFOLD ——————————
-scaffolding generates a lot of stuff for you that you would normally have to do it by hand. we'll be doing more by hand later.
-it's a way to do a quick protocal but is very unsecure.

———————— SETTING UP RAILS APP FAQs (Jeremy's slide)————————
FACTS:
-went through all files required to set up a new program. see vid h3.

Jeremy's notes:
Prototyping in Rails (ie.making a new basic site)
1.Make a new rails app called “my_task_app” by typing "rails new my_task_app" into terminal
2.Go into the directory by typing "cd my_task_app
" into the terminal.
3.Generate your model and views with a scaffold by typing "rails generate scaffold Task name:string description:text completed:boolean (or whatever you want your program to do/be)" into the termial.
3. sync the database with your rails changes by typing "rake db:migrate" into your terminal.
4. boot your rails server by typing "rails server" or "rails s" into your terminal.
5. In your browser, typing in "open http://localhost:3000/task(or whatever you named your class in step 3)"
6.Stop the app from running by hitting control+c in the terminal.
7. CD .. out of your app's directory.
8. delete the app and do it again by typing "rm -rf my_task_app/" into the terminal.

———————— SETTING UP RAILS APP FAQs (My notes)————————
Steps:
1.Create new projects/app:


1.Create new projects/app in rails using postgresql for db:
in terminal:
rails new myapp -d postgresql
(Creates a new Rails Application entitled myapp using Potsgresql for the database. Will see a new file created in the dir u made this in entitled myapp with ??? files in it.)
2.Set up version & gemset files in the new directory:
in term (in the directory) or in atom - create new files: .ruby-version and .ruby-gemset. In term - type "atom .ruby-version" and "atom .ruby-gemset"
3. In the ruby-version file put in the ruby version "2.1.2"
4. In the ruby-gemset file put the name of the file ie. "todo"
5. Cd out and then back in.
Will see something like this:
ruby-2.1.2 - #gemset created /Users/user/.rvm/gems/ruby-2.1.2@todoapp3
ruby-2.1.2 - #generating todoapp3 wrappers...........
(what is this? what r u doing really?)
6. bundle.
type: "bundle" in the terminal.
At the end should see something like this:
Installing sqlite3 1.3.9
Installing turbolinks 2.2.2
Installing uglifier 2.5.0
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
Post-install message from rdoc:
Depending on your version of ruby, you may need to install ruby rdoc/ri data:

<= 1.8.6 : unsupported
 = 1.8.7 : gem install rdoc-data; rdoc-data --install
 = 1.9.1 : gem install rdoc-data; rdoc-data --install
>= 1.9.2 : nothing to do! Yay!
7. Scaffold.
In term type: "rails generate scaffold "Name" (use capital, ie 'Tasks') : 'string' and repeat for wanted items. ie:
rails generate scaffold Task name:string date:string importance:string
8. Rake.
In term type: rake db:migrate in the direcotry your file is in. Should see..?? == 20140610002740 CreateAddresses: migrating ==================================
-- create_table(:addresses)
   -> 0.0021s
== 20140610002740 CreateAddresses: migrated (0.0022s) =========================
(this syncs rails with the server)
9. goto to routes.rb file in the config folder  and type in "root "tasks#index"" below the current code with "tasks" being the word after resources above. - this makes "tasks your homepage"
10. restart server by typing 'rails s' in the term while in the directory.
11. go to url and do localhost:3000 and should be there.
12. Stop the app from running by hitting control+c in the terminal.
13. CD .. out of your app's directory.
14. delete the app and do it again by typing "rm -rf my_task_app/" into the terminal.




---------Day 13 - June 5, 2014
————————CLICK EVENT IN JS, DISAPPEARING JS IMAGE
FACTS:
-MUST SET EVENT Listeners up when page loads so it tells the page that when these events happen, do something.
-This overrides something...
window.onload = function() {
  alert("Hello");
};
-from above:
#window refers to ur broswer window. it knows it's size etc.
#onload says when the window loads, the event fires and we're going to give onload (a window loading..) a new funtionality. That's the 'function' part above.
window.onload will return the reference to the function that isn't defined. This is just defining it. it doesn't run or do anything.
window.onload() this actually runs it.
-can call document.images in the interpreter to get all the images on your site.
-can say document.querySelectorAll()
-In js use "this" to ??... It means this current thing that you are.

———————— jS, javascript, dropdown menus, FORMS, debugger Gem Pry, forms, Get & post requests————————
FACTS:
-you can't put a child form inside of a form.
-must have a closing tag.
-this is not valid:
<div>
  <form>
</div>
<div>
  <form>
</div>
-but this is:
<div>
  <form>
  </form>
</div>


————————ACTION ATTRIBUTE ——————————
FACTS:
is:
action = ""
"method" attribute is requried = the method with which we want the data sent.
-the only two values we'll use really are "get" or "post".
-use Get to get information from server and Post to post info.

USE IT WHEN:

EXAMPLE:
<form method="get" action="search form">
</form>
CHALLENGE:

————————ELEMENTS INSIDE OF FORMS ----------
FACTS:
-input, select, button, textarea are tags: ie: <input>
-input has types- hidden(hidden from you), text, password, radio, checkbox options.
-Then text has types- email, number, url etc options.
-input are self closing
-params is data sent through forms. for us to know the value of the info in a field thought, it has to have a name or a key. the key has a value. so you use the "name" attribute in the form tag to do this.
-let's debug using pry by putting pry in gem file.
-anytime you update a gem file, you have to bundle!
-put in binding.pry in file??..
-can't duplicate the 'name' attribrute in a form element.
-in js, 4things return false - false, nil, undefined & zero
-anytime u view a webpage, you are doing an http 'get'.
-u should never use the back button cuz it keeps the errors that were there before.
-textarea tag does need to have an end tag!

CHALLENGE:
1. Add these form elements
-at least 2 checkboxes
-at least 2 radio buttons
-1 password field for a secret message
-1 more select tag
-1 more textarea tag
-1 more normal text input tag
1.5 when the form is submitted, make all the data display on the about page
2.style all the form elements to make them look nice. ADD CSS
3. Add some js validation to prevent the name field from being empty.





May 30, 2014
————----------—RUBY-------------------
-CRuby is built in C. JRuby is built in Java and runs on the JVM.
-One of Ruby's downsides is poor memory managment and it's speed at large sizes.
-Rubinius is built in Ruby.

---------—————-DEBUGGING---------------
WHAT IT IS:
-See day 9 video. May 30, 2014
-It will be very common to use the raise command to debug.
-Debugging tools - pry is one.

-To set up a gem for a program: create a file in that directory called 'Gemfile' with a capital G and put something like the following in it:
source "https://rubygems.org"
gem "pry"
-u bundle every time add a new gem.
-put 'binding.pry' into your code to have binding use the gem 'pry' to run and debug cool stuff.
-make sure to bundle from the terminal from the directory your in simply by typing "bundle"

USE IT WHEN:
-setting up a new file.

CHALLANGE:
1.open up tictactoe app
2.add a gemfile by going to Atom/ file/ new/ give it the name "Gemfile" with a capital "G"/ save it/
3.add in the "pry" gem by typing in : source "https://rubygems.org" and on the next line: gem "pry"
4.require "pry" in your game setup by typing " require "pry" " on the top line.
5.use the binding.pry at some point in the game and play with pry by typing" "binding.pry" somewhere in your code and watch what happens when you run it.





Day 10. Monday, June 2nd
arguments review - when passing in arguments, you have to pass in one for each parameter set unless one is optional. in this example:
def get(path, options = {})
end
path is required cuz it's fixed but the second is a default value so it's optional. the value for the default can be a hash, array, string, anything cuz it's just an object, it's just like we're just creating a var.
&block is optional even though it doesn't have a default value.
yield in ruby code means - run whatever is inside the block and then continue on.
putting yield in let's you run some other code inside of the block.
It also allows you to run code inside of someone else's code.
min 30ish - splat * - means many. many parameters, many arguments.
min 44 - DSL - Domain specific language. with dsl, u create a pattern of simplifying processes. dry - don't repeat urself.

—————————— SINATRA GEM min 1:04
it is a gem that defines a dsl for making small websites.
it's for making websites not web applications.


Steps:
1.mkdir a sinatra folder in projects with a my_first_site folder in it.
2. cd into it.
3.open atom and create a Gemfile with a cap in the my_first_site folder.
4.type: source "https://rubygems.org" on first line and: gem 'sinatra' on the second.
-These next two files are specific to RVM (Ruby Version Manager) which allows us to manage which versin of ruby we're using on a program.
5. create a new file in atom in teh same folder called .ruby-version and type: 2.1.2 on first line and save.
6. create another new file in ataom in the same folder called .ruby-gemset and type: "my_first_site" on top line and save.
-We'll create a Gemfile, .ruby-getset and .ruby-version for every new app/program we build.
7. Tell RVM that we want to use something specific. CD .. out of the directory and cd back in. RVM prints out some stuff to us. This only happens the first time we do this.
type rvm current into term and it'll tell us our current ruby version and our project gemset.
There is are no gems yet so type in: bundle into term and it will bundle all of our gems. Will show 'your bundle is complete'. typing:gem list in term will show all gems installed including sinatra. gem list -d sinatra will give us gems specific to sinatra. This will create a Gemfile.lock in the same folder.
8.Make at new ruby file called site.rb in the same folder. this is our ruby file.
9. Since we're going to be using sinatra gem, we type: require 'sinatra' on the top line. And since sinatra uses a dsl, we're going to use the dsl by typing below this:
The '/' below is an http verb get that allows us to go to '/'
get '/' do
  'yay! my first site'
end
-That allows us to acces Sinatra's dsl and use it to run Sinatra code.
10.Run the program by typing in the term: ruby site.rb and you should see "Sinatra has taken the stage on 4567 (or something) for development..." in the term. Running our program starts up Sinatra. Sinatra has a little mini webserver and when it starts, it boots up this server and sets it to the number 4567. The server is now runnign in the term and the report we see in the term is a log file for our program. To stop the server from running hit: control c in the term. If you refresh broswer now, it will give an "unable to connect" error cuz the server isn't runnign and can't compile the website.
11. type: localhost:4567 into a browser url.
12. Now In the site.rb file type:
get '/first' do
  'another page on my site'
end
13. kill the server and restart it so it can see our new code. do this by control c in the term and cd back into our file. ANYTIME WE MAKE CHANGES TO OUR CODE IN OUR .RB FILE WE HAVE TO RESTART OUR SERVER (BY HITTING CONTROL C AND CD ING BACK INTO FILE)
14. go back to browswer and type in: /first after the "localhost:4567" and it should take you to our new page.
-We want to be able to have our own html file to put all of our html into and have sinatra render it from there so do the following:
15.Add folder called views inside of our my_first_site folder. This is were we put all of our html files.
16.Inside of the views folder create a new file called index.html
17. type something like  <h1> look ma! </h1> in this index.html file.
Sinatra has templating which is the ability to mix in ruby code into html. it's default templating engine is called erb - embedded ruby.
18.To tell Sinatra which templating engine to use, we go to the site.rb file and replace the 'yah! my first site' in the first get statment with: erb :index, giving it the name of the file we want it to load where erb is the templating engine we're going to use and :index is the file view we are redering.
19. but then we have to rename our index.html file to index.erb so Sinatra can read it and it will treat it like it's html. erb stands for embedded ruby. erb tags look like <% %>. They can be used to DO something or PRINT something. The code to print looks like this <%= %>.
19. reboot server using instructions from above and refresh website to see new html.
20. to create other pages, create new erb files in the views foler, put the name of them into the .rb file so it links to them and restart server.
21- then put some links to each other like:
<a href="/">Back home</a>
22 - put some ruby code like Time.now inside of ruby, inside of a p tag or something.
Puts only prints something to the console log, not to the browser (except when we want to use it for debbugging)
23- add a symbol (:name) into ur /first path of ur ruby block in the site.rb file and inside the block assign an instance variable of the same name as the symbol (:name) to params. cuz params is a hash, it already has a key defined inside of it called name. we can access the value of that key by putting [:name] after params. we don't know what the value of the instance variable is yet.
by having this symbol in our route, we're telling sinatra that this is a placeholder var for something and we're just giving that variable a name for now (:name). we can give it whatever name we want. sinatra, when it sees this variable placeholder thing, it take the params hash that it uses and it adds in this key for whatever we called that, and the value of that key/value pair is going to be whatever the user enters into the url.
so to print out the value of that instance variable, on our first.erb page, we'll do:
<p><%= @name %></p>
rf /first - sinatra error. it doesn't know wha that is.
go to /first/ and put in ur name and rf. ur name should show up cuz it's a variable that could be anything so we gave it a value. you can put anything in there.
So what is this really good for?
- add another symbol to the get '/second' block on our .rb file here:
change to:
get '/second/:page_id' do
  @page_id = params[:page_id]
erb :second
end
then on our second.html template:
<a href="/second/<%= @page_id %> ">Go to page <%= @page_id + 1 %> </a>
rf /second/1  read error message. this is saying that the instance variable @page_id is a string and we're trying to add a number to it which doesn't work. whatever params passes through to the url is going to be a string so convert to integer using .to_i at the end of:
  @page_id = params[:page_id].to_i
kill server, rf /second/2, should see Go to Page 3 and if u click on it, it should keep increasing by 1.






—————————————— May 29, 2014 Day 8——————————————
GITHUB
-Use git add -A to add all files in a folder at once.

FILE I/O
-gets and puts is basic file i/o stuff
-In ibr:
"Dir.pwd" returns what "pwd" would return in but as a string. This also makes it dynamic instead of static and it makes it easier to require files.
-Dir.glob("*.rb") returns an array of file names so we can iterate over these file names and then do "require" on one of the files.
-we can run "ls" in ruby have to tell it that it's a ruby command and not a system command: system("ls").
-can also do it for pwd and other common commands.
-use backtics `` for shorthand. `ls`
-fun: `say -v
-fun: do name = Kenny then `say -v "Hello #{name}"
-http://apidock.com/ruby/Dir for reference
-Dir.chdir is same as doing "cd" in terminal.
-"File" - File.exists?("car.rb") tell me if a file currently exists in the currently directory.
-Dir.exists?("some_director") tells u if a dir exists or not.
- http://apidock.com/ruby/File for info on "File."
-Create a new file:
new_file = File.new("first_file.txt") give u an error cuz ur computer needs to know the type of mode for creating a file. online ref: http://apidock.com/ruby/IO
So use: File.new("first_file.txt","w+") which puts us in the right mode and returns an instance of the file..?
-new_file.write("hello") writes text to the file? the return value will be the number of bytes written to the file.
-When you open a file, you have to close it when ur done. Use: new_file.close to do this.
-To read each line indiviually and returned seperately use a Ruby built-in method File.readlines. ex: File.readlines("first_file.txt"). Then assign it to a variable like: line=File.readlines("first_file.txt"). Then do lines.eac do |line| then puts line.upcase and end to print out.

YAML FILE TYPES
-Is a plain text file that has a specific structure to how you format ur text.
-yml files aren't really a ruby thing. php, pytheon all interact with yml files. it's just a plain text file.
-To use a yaml parser, use require 'yaml'
-This to get a hash:
2.1.2 :003 > YAML
 => Psych
2.1.2 :004 > YAML.load_file("contacts.yml")
 => {"contacts"=>[{"name"=>"Kenny", "hobby"=>"coding"}, {"name"=>"Linda", "hobby"=>"loving Kenny"}, {"name"=>"Ar", "hobby"=>"bugging Bella"}, {"name"=>"Bella", "hobby"=>"teasing Ari"}]}

-When we write to a file, we're using a string.

—————CHALLENGE
-Create an address book in ruby.
0. write a program called "friends.rb"
1. create a hash with some information about your neighbor, and yourself.
2. create a new yaml file called "friends.yml"
3. write that hash to the yaml file. *note be sure to close the file.
4. Running "ruby friends.rb" should generate this file.
Mine:
# 0. write a program called "friends.rb"
require 'yaml'
# 1. creaet a hash with some information about your neighbor, and yourself.
#friends = {"neighbor" => "alien", "kenny" => "president"}
my_array = [
  {name: 'jeremy', age:32},
  {name: 'ty', age:27}
]

# 2. craet a new yaml file called "friends.yml"
#File.new("friends.yml" "w+")
new_file = File.new("friends.yml", "w+")

# 3. write that hash to the yaml file. *note be sure to close the file.
#YAML.load_file("friends.yml")
new_file.write(my_array.to_yaml)
new_file.close

# 4. Running "ruby friends.rb" should generate this file.

#better way:
# File.new("friends.yml", "w+") do |f|
#   f.write(my_array.to_yaml)
# end

---GEMS:
rubygems.org
in terminal use: gems list to see all gems u have. use gem -v for version.

-----INCRYPTION


—————————————— May 28, 2014
TERNARY OPERATOR:
x = 4
y = 5
x < y ? "yes" : "nope"
-Could also store it in a variable like:
result = x < y ? "yes" : "nope"
-And this is why you can't put a "?" at the end of a variable. Ruby thinks ur trying to use a turnary operator.

CLASSES REVIEW:
-The whole reason we have classes is becasue the allow us to put down our thoughts into code in a more organized fashion, like grouping things in a like fashion like users on a website like facebook for example a user may need to have an email and name but without a class, we can't call them a user. The email and name they just put in is not assoiated with an object, it's just two random pieces of data but if we have a "User Class" with and email attribute and a name attribute, we know that it's "User" information.

LINKING TO FILES:
- Use "require" like:
require 'date'
-if it's a file that ends in .rb, we don't need to put it as Ruby knows it.
- only need to do it once.
example with date object after we've required it.
- date.method to find out all the methods that can be used on it.
- date.to_s
- require 'net/http' to connect to internet.

MAKING NEW FILES:
- The Load Path which is an array of strings which are a path to where ruby stores all these files. so ruby knows where "date.rb" and others are located on ur machine but it doesn't know where first.rb is so we have to tell it where it is so it can load it into the array of strings.
Use "require_relative" which says the file should be close around me somewhre. As long as it's in the same directory, it'll find it.
Order of how you run the "require" files matters if there are dependencies

LOAD PATH:
$load_path? shows the array of the directories where ruby files may be.
to add our new file to the array

—————————— MODULES & MIXES:
FACTS:
-Modules can be use in two ways. 1.As a Namespace or 2. As a mixin.
-Modules are constants and are therefore capitalized.
-You can't instantiate a module.
-Modules can't inherit from anything.
-Modules provide a structure to collect Ruby classes, methods, and constants into a single, separately named and defined unit.
-When we use Moduels as a namespace, it usually means that the Classes that we're defining, the Objects that we're setting up, we're defining them inside of a Module so that when we go to instantiate that class, we instantiate it through it's namespace. When you instaniate through the Name Space, it will look like this Your_module :: Class_name.
-Namespacing is putting a class inside of a module.
-Ruby can't do multiple inheritance.
-Modules define a namespace, a sandbox in which your methods and constants can play without having to worry about being stepped on by other methods and constants.
-Can put as many methods into a module as you want.
-Ref: beginnign ruby pdf

ex:
module Transportation
  def going_forward
    puts "moving forward"
  end
end

By name spacing a Module and Class like this:
#using the module as a namespace
module Business
  class Car
  end
end

#again using the module as a namespace here.
module Vehicle
  class Car
  end
end

you can instantiate on of the "Car" classes by putting the Module name in front of it like this:
Vehicle::Car or Business::Car so:
porche = Vehicle::Car  (an object(instantiation) of the 'Car' class inside the 'Vehicle' Module)
or
Nissan = Business::Car

USE IT WHEN:
-you want to treat the two car classes totally seperately. A Namespace keeps classes of the same name seperate.

SCOPING CONTANTS:
Kenny::Person

CLASS EXORCISE:
-Do tictactoe with require method like a board.rb or a class for x or o, create new instnace of each that inherit from a player class etc.
class Player
  def wins?(marker) #this takes the marker and returns true or false




/*—————————————— May 27, 2014 day 6——————————————*/
-conditional operators are: <, >, +, = etc
-comparison operators are: &&, ||
-alternative to using an if statement is a case statement.
CREATING A METHOD:
- Start with "def":
def does_x_win
end
or:
def grab_food
  puts "grabbing food"
  puts "and it's good"
end
-Blocks of code are scopes that define everything.
-Put () next to your new defined method to make it dynamic:
def grab_food(food)
  puts "grabbing some #{food}"
end
-call this method by:
grab_food("sushi")

—————————— ARGUMENTS ——————————
-"wrong number of arguments (0 for 1)" means you didn't put in the required amount of arguments. Will also get (1 for 2) if there are two required arguments and you're only passing 1. ie grab_food ("sushi") instead of grab_food("sushi", "juice")
-Pass multiple arguments on a method by:
def grab_food(food, drink)
  puts "grabbing some #{food}"
  puts "grabbing some #{drink}"
end
-When defining a Method inside of a Class like this:
class Human
  def say(something = "food")
    puts "eating #{something}"
  end
end
you can put the above arugment 'something = "food"' in there as a default argument which will be passed in be default if you don't pass anything through.
-A common type of use of arguments is having a required parameter and a default parameter like this:
class Router
  def get(path, options = {})
  end
end
more on these advanced ways of passing various types of arguments into varios types of parameters in dpl day 10 vid 24minutes.
-The ampersand "*" in a parameter means that it is a block.

-Variables have different scopes. Local variable are only accessable inside the block/scope where it's created.
-Making this dynamic looks like this:
meals = [
  {food: 'pizza', drink: 'beer'}
  {food: 'sushi', drink: 'sake'}
  {food: 'pasta', drink: 'wine'}
]
-Call it like this:
meals.each do |meal|
  grab_food(meal[:food], meal[:drink])
end
-Instance variables have @. ie. @meals. And they will have a larger scope and will always be available to us.
-More dynamic example with user input:
meals= []
dinner = {}
puts "Please enter in a food"
food = gets.chomp
puts "Please enter a drink"
drink = gets.chomp
dinner[:food] = food
dinner[:drink] = drink
meals << dinner

meals.each do |meal|
  grab_food(meal[:food], meal[:drink])
end

-NOW ADDING LOOP TO MAKE MORE DYNAMIC:
meals= []
dinner = {}

puts "Please enter in a food"
food = gets.chomp
puts "Please enter a drink"
drink = gets.chomp

dinner[:food] = food
dinner[:drink] = drink
meals << dinner

puts "Enter in another food? [Y] or [N]"
answer = gets.chomp

meals.each do |meal|
  grab_food(meal[:food], meal[:drink])
end
...incomplete... get full code later...

CLASSES
ex:
class Animal

end
-The naming convention for class is - only begin with a capital letter. If it has multiiple words us case like this: CrazyAnimal. Anything that starts with a capital letter is a contant. Variables can change, constants can't. A class is kind of like a Noun, a person,place,thing. It doesn't change. Methods are actions that other animals can also do.
DEFINING METHODS:
ex:
class: Animal (like the Noun)
  def run (like the verbs)
  def eat (like the verbs)
  def hide (like the verbs)

INHERITENCE
ex:
class Human < Animal
  def play_computer_games
-Animal is inheriting traits from Human.
-Other examples:
class Parent
class Child < Parent

class Boat
class Sailboat < Boat
current study
ATTRIBUTE ACCESSORS:
class Chair
  attr_writter :color, :size, :arms, :design, :weight
  attr_reader :color, :size, :arms, :design, :weight
  attr_accessor :color, :size, :arms, :design, :weight
  end
end
-These 3 above are ways to
-attr_writter lets us ASSIGN a value.
-attr_reader lets us RETURN value.
-attr_accessor lets us do BOTH READ AND WRITE.

CREATE A NEW OBJECT OF A CLASS:
class Sandwich
pbj = Sandwich.new

2 TYPES OF METHODS:
1-INSTANCE METHODS:
-A method that you can only call on an INSTANCE of a class, not on the class itself.
ex:
String.length doesn't work because length is an "Instance" method and can only be called on an instance but we're calling it on the class String itself.

2-CLASS METHODS (or class level method):
-A methode that you run directly on the class itself.
ex:
Sandwich.new

-Types of Instance Methods are reader (def age) and writer (def name=(new_name)).
-Methods with a "?" at the end are predicate methods:
def old_enough?
-These only return true or fasle. ie. the .empty? method for arrays.

-die! is another Instance Method. This method means it will be destructive in some way. or it might modify something in some way like making a value upcase forever.

Class Instance Method:
class Human
  def self.evolve
  end

  def Human.evolve
  end

-In Ruby, everything returns a value. The return value from a method will be the last evaluated thing in that method.

-Class Methods are called on the Class itself, not the instance.

Instance Method examples:
reader method:
def age
end

writer method:
def name = (new_name)
end

predicate method:
def old_enough_to_vote?
end

destructive method:
def die!
end

Class method:
def self.evolve
  puts "evolve from monkey to man"
end

—————————— INSTANTIATION FAQs:
http://ruby.about.com/od/oo/ss/Instantiation-And-The-Initialize-Method.htm
-Creating a new instance of an object.
-This method is called initialize.
ex:

-Review today's class morning video. May 27, 2014
Exorcise:

Class challenge:
Find an object in the class. Define it's actions & attributes.

class Laptop
  def display
  def play_sound
  def run_programs
end

class Laptop
  attr_accessor :color, :size, :speed, :design, :weight
end

-You can put anything inside of a method. examples:
def boy?
  sex == "male"
end

def girl?
  sex == "female"
end

def say_name
  puts self.name
end


Class Challenge:
# make a car object
Class Car

# the car can drive
# the direction it drives should be dynamic
  def drive(direction)
  puts "The car is driving #{direction}"
  end
end

# the car has a year, make and model attrubutes
attr_accessor :year, :make, :model

# instantiate the object
corvette = Car.new

# make the care drive.
# When driving, it should just print out twich dirction it's dirving.
corvette.drive("Super fast forward")

# Assign all the attributes a value for your car.
corvette.year = 2014
corvette.make = "Stingray"
corvette.model = 1.1

-If we tell "initialize" that it takes some set of arguments, then we can tell new that it also takes that number of arguments.
ex:
  def initialize(make, model, year)
    @make = make
    @model = model
    @year = year
  end

my_car = Car.new("corvett", "1.1", 2014)
puts "my car is a #{my_car.make} #{my_car.model} #{my_car.year}"

Class Challenge:
# initialize a git repository and add, commit, and push

# create a personal chef class
# make his name attribute accessible
# make a method called make_toast that accepts a parameter (brown, light brown, burnt, burnt black, etc)
# make a method called make_juice that accepts a parameter (orange, apple, cranberry)
# make a method called make_eggs (1,2,3, etc) and the style (overeasy, scrambled, sunnyside etc)
How do we run the code that we've written?

/*—————————————— May 23, 2014 ——————————————*/
PSUDO CODE, CONDITIONALS,COMPARISON OPERTORS, COMMENTS, CASE STATEMENT, LOOPS,

- How to create a file in atom from the terminal: First get out of irb if in it,
then type <atom "file name">
CONDITIONALS
- If some_condition
    do_stuff
  end
- False and Nill are the only two things in Ruby that equate to false.
Example if statement:
if my_age >20
  puts "Can go to club"
end

COMPARISON OPERTORS: =, =<, > +!,

CONDITIONAL OPERATORS: && for multiple "if" statements. ie:
  if x_in_space_1 && x_in_space_2 && x_in_space_3
    puts "X wins!"
  end
- || for "or"
- else equals "otherwise" in english
- use the Bang "!" symbol to make something "not" like:
  if !your_car_is_working
    hit me up for a ride
  end
- Can use the else operator inline:
  puts "let's grab lunch" unless you_already_ate

ELSIF:
  if your_grade >= 90
    puts "You get an A"
  elsif your_grade >= 80 && your_grade < 90
    puts "You get a B"
  elsif your_grade >= 70 && your_grade < 80
    puts "You get a C"
  else
    puts "You fail"
  end

COMMENTS:
# for one line and
=begin
=end
for multi-line notes. MUST be all the way to the left.

CASE:
Used when you have a lot of choices or options.
code ie:
grade = A
case grade
  when 'A'
    puts "Yay! Ice cream for you"
  when 'B'
    puts "Not too shabby"

LOOPS:
ie: while loops:
code ie:
  while nemo_is_still_lost
    puts "just keep swimming"
  end
PSUDO CODE 3 LITTLE PIGS:
Variables:
  house 1 is straw
  house 2 is sticks
  house 3 is brick
Conditions:
  if house is not brick then,
    the wolf blows it down
    say "you suck"
  otherwise
    the wolf doesn't blow it down
    say "You are made of stone dude! No rent due"
MAKE A CALCULATOR BRANCH

HW - finnish funwithnumbers

hw - finnish number.rb

TICTACTOE PSUDOCODE:
-Create a board =>
-Loop that ends after 9 turns =>
-Determine who's turn it is
  -create player1, player 2
-Player chooses a space
  -Get player input,
  -Define spaces,
  -check to see if spaces are taken.
-Define 8 winning combinations. =>
-Check to see if anyone has one. =>
-After 9 turns, if no one has won, declare a tie.

LIMITED LOOP:
turn = 0
while turn < 9
  puts turn
#need to tell turn to increase it's value here:
  turn += 1
end

can also:

HW - complete through 16 on code academy

/*—————----————— May 22, 2014 —————----—————*/
More ruby. Arrays. 4 types of Variables.
- PUtting {<someting>} in a string is called interpolation.
- when you use single quotes, it will return EXACTLY what's between them so you can use things like String Interpolation cuz it will show up.
- two other data types beyond strings and fixnums. Arrays & Hash ( {} ) & ":" which is a symbol which is usually looks like :name or :bird & Time.
- Time.now gives us info on time:
: Time.now
 => 2014-05-22 11:57:54 -0600
- Can also use Time.now.year or Time.now.minute

- symbols are used a lot in hashes.
- symbol example:
me = {
:name => "Kenny",
:age => 40,
:age => "tall",
}
puts me[:name]
- add a property to the hash like: me[:sex] = "male"
- also can use {food: 'taco'} instead of {:food => 'taco'} for brevity.
- Convention is to use lowercase for symbols.
- Arrays are collections. you can iterate Arrays which means going over it one by one.
- In ruby you can assign anything you want to a var. So you can assign arrays to a var.
- each item in an array is called an index.
- : people.each do |person|
puts person
end
- : 2.1.2 :037 > things.each do |number|
2.1.2 :038 >     puts number * number
2.1.2 :039?>   end
1
4
9
- Ruby has 4 types of variables: see other note:
- Hash data types:
storage = {"Box 1" => "Stuff", "Box 2" => "More stuff"}
puts storage["Box 1"]
- each key needs to be unique but the values can be the same. still called indexes just not zero based.
- : storage.each_pari do |key, value|
puts "The key is #{key} and the value is #{value}"
end
- apidock.com/ruby


VARIABLES, INSERTING INTO ARRAYS, HASHES

Assign: Find 5 methods for strings in Ruby: .chomp, .delete, .replace, .size, .scan
Assing: Find 5 methods for Fixnums/Integers: .even?, .zero?, .modulo, .abs, .to_s,

- use <numbers.map($:to_i) as a short way changing a string array to integers
- PUtting {<someting>} in a string is called interpolation.
- when you use single quotes, it will return EXACTLY what's between them so you can use things like String Interpolation cuz it will show up.
- two other data types beyond strings and fixnums. Arrays & Hash ( {} ) & ":" which is a symbol which is usually looks like :name or :bird & Time.
- Time.now gives us info on time:
: Time.now
 => 2014-05-22 11:57:54 -0600
- Can also use Time.now.year or Time.now.minute

- symbols are used a lot in hashes.
- symbol example:
me = {
:name => "Kenny",
:age => 40,
:age => "tall",
}
puts me[:name]
- add a property to the hash like: me[:sex] = "male"
- also can use {food: 'taco'} instead of {:food => 'taco'} for brevity.
- Convention is to use lowercase for symbols.
- Arrays are collections. you can iterate Arrays which means going over it one by one.
- In ruby you can assign anything you want to a var. So you can assign arrays to a var.
- each item in an array is called an index.
- : people.each do |person|
puts person
end
- : 2.1.2 :037 > things.each do |number|
2.1.2 :038 >     puts number * number
2.1.2 :039?>   end
1
4
9
- Ruby has 4 types of variables: see other note:
- Hash data types:
storage = {"Box 1" => "Stuff", "Box 2" => "More stuff"}
puts storage["Box 1"]
- each key needs to be unique but the values can be the same. still called indexes just not zero based.
- : storage.each_pari do |key, value|
puts "The key is #{key} and the value is #{value}"
end
Just like an array, you can put anything into a hash. ie string, fixnum hash, array.
but the KEYS need to be unique!
Can use these formates for the key:  "key" :key 'key'
Can also iterate over hashes:
storage.each_pair to iterate over both key/value. or each_key or each_value
storage.each_pair do |key, value|
  puts "The key is #{key} and the value is #{value}"
end
Add to a hash using = "" so:
storage[:box3] = "Tons of stuff"
and again, get the value like storage[:box3]
You can also use this shorter way of writing a hash:
{box4: 'so much stuff'} so no rocket and colon on right side.
- apidock.com/ruby
- Scoping - each of the four types of variable (local, instance, class and global) are scoped to their own area execpt the global variable which can be accessed everywhere.




/*—————————————— May 21, 2014 ——————————————*/
IRB
- To get into irb  - <irb>
- 2.5 is a fixnums and is a float. a decimal is a float.
- in ruby, to get a float (decimal) use at least one decimal. ie.- 5/2.5=2.5
- Use <.class> at the end of a line to know what data type it is. ie- "kenny".class or 345.class or 2.5.class
- 5.downcase doesn't work cuz fixnums don't know how to downcase. each method only works with certain methods. fixnums don't work or udnerstand downcase. but strings know what they mean.
- "kennyT".reverse.upcase is method chaining. both can do their thing and upcase works on upcase cuz <"kennyT".reverse> becomes a new string that .upcase recognizes.

—————————— MISC ——————————
SFTP - Secure file transfer protocal. it's being able to xfer files using a secure connection.
