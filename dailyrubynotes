—————————— How to link comments —————————— 
what will we need? post id. so let’s build a new model
rails g scaffold Comment author message:text post_id:integer
when linking things together, 1set up post id. 2. set up routes
in routes.rb - scope resources by:
resources :posts do
	resources :posts do
	resources :comments
end
-rake routes to see new routes in term.
#3. for rails to understand the relationship between these two models? belongs_to
associations go in the model
-go to models/post.rb
has_many :post
-in comment.rb
belongs_to :post
-seed some stuff:
in seeds.rb:
Comment.create(author: “George Bush”, message: ‘I really am crazy’ , post_id: 1)
Comment.create(author: “Barrack Bush”, message: ‘I so high’ , post_id: 1)
-rake db:migrate
-rake db:seed
-rails c: Comment.all to see sql of all
-@post
-@post.comments should show all posts with comments.
-quit console
-edit post page to have list of comments on bottom:
-views/post/show.html.erb/:
<% @post.comments.each do |comment| %>

<h3><%= comment.author %></h3>
<p><%= comment.message %></p>
-check page. should be two elements.
-add dependant destroy to model:
-in models/post.rb ??? …


Wed June 18, 2014 day 22
-in term: rails new blog -d postgresql
- create ruby version and gemset from term:
atom .ruby-version and atom .ruby-gemset
-make it so these can be used by cding out and in:
cd blog
-git init, add, commit, push. also create repo on github.
-cd into dir blog
for model you need what models? comments and post models
-rails g model Post title author description:text   (string is default for 1st )
-bundle
-if you have mysql instead of postgres, change it to “pg” in the gemfile folder
-rake db: create and migrate
-rails c to confirm it looks good.
-Post.all to see them.
- to make sample data go to seed file. in seeds.rb:
Post.create(title: ‘my first post’, author: ‘kenny t’, description: ‘this is a cool blog’)
past a few more times:
(title: ‘my first post’, author: ‘kenny t’, description: ‘this is a cool blog’)
(title: ‘my second post’, author: ‘kenny t’, description: ‘this is a cool blog’)
(can also do this from console)
-in term: rake db:seed
-checkto make sure worked - rails c - Post.all (should see sql)
-quit console
-git push
now with one model, we have to build controllers and views.
-rails g controller Posts index show new edit
-gitty gitty
let’s work on index page frist. what do have to do to get index page up and running?
-controllers/posts_controller.rb:
<h1>Posts</h1>
<% @posts.each do |post| %>
<h1><%= post.title%></h1>
<h2><%= post.author%></h2>
<p><%= post.description%></p>
<br>
<% end %>
-to start app rails s
-run rake routes to check routes
-change routes file to:
resources :post
-rake routes again  and should see updated routes
-localhost: 3000/posts in brwser
-in show folder:
<h1><%= post.title%></h1>
<h2><%= post.author%></h2>
<p><%= post.description%></p>




CHALLENGE:
-Create a static home page:
in config/route.rb -  root 'static#home'
sv, rails s, go to localhost: 3000

-Create a global navbar in your layout:
gto views/layouts/application.html.erb
under section - div class = "row", withing that class - div class = "col-sm-12", go to bootstrap page to find documentation about it.

-Add a link to the home page
-Add a link to the noms page
-Fix the style on the show page
-Fix the style on the edit / new pages



Tuesday June 17, 2014 Day 21
—————————— BOOTSTRAP ——————————
9:53 for new rails foodie application
-Sass is kind of a programming language that makes CSS better.
-look up and bookmark foundation as a bootstrap comparison
- fontawesome for fonts

Vid m
connect bootstrap using cdn (content delivery network) on their website or download it if needed.
Bootstrap system uses a 12 column system and block spacing.
Bootstrap just adds a class to your normal css and it adds a whole new style. you don't need to write any new css code.
Create a rails app using bootstrap:
-  g new model Foodie
-  into foodie
- open in atom
- go to Gemfile to add gems. below the sass-rails gem add 'bootstrap-sass' in sing quotes.
- update the gem file log by saving it in atom and bundling. This will go back through all gems and update them all.
- Sass = syntactically awesome style sheet. Sass is a css pre-processor. a different syntax for writing css and then prior to compiling .css the pre-processor runs through it and turns it into css. it give us the ability to do some things that we usually can't like setting variables cuz ti's closer to a programming language. you can set functions, mthodds, set ariables, if statements, math equations. Bootstrap is built using LESS pre-processor but we're not going to use it cuz it'll require us to intall a number of other gems, so we'll use sass.
- use a scaffold generator to be quick: in term:
rails g scaffold Nom name:string delicious:boolean
- make sure db is configured - host: localhost in database.yml file.
- rake db: create
- rake db: migrate
- rails s
- go to localhost: 3000/noms
should see Listing noms etc
-insert a food. do a couple of them.
 non of the styling on there is our bootstrap styling, just default.
- get rid of hte scaffold - app/assests/stylesheets/application.css and get rid of all but require_tree and require_self lines. these 2 lines are called manifest. the stylesheet manifest. the mainfest in rails is part of the asset pipeline which is a structure where you can put these assest (ss and js) into folders and thye have a purpose and then rails can find them and run them though preproseccors like sass and LESS. so by including our sass preprocessor (that rails did for us) and if we put our sytlesheets in the asset pipleine we can use sass and rials will automatically run it through the preprocessor and convert it to css. we have to convert to css cuz browswers don't undertand sass or less. so if we want to use other types of css we have to run them through a preprocessor so they convert into css. we've actually been using a diff preprocessor, erb. so we've taking our erb template and run it trhough oru prepocessor and it kicks out html. so the asset pipeline has a gem called sprockets which reads the manifest and figures out how to compress all these different stylesheets. we have 3 diff sytlesheets now. so sprockets reads the manifess which says 'include everything that's in this folder' (requrie_tree) and after that, include the current file.  so the 'require_tree' part of the manifest is saying 'include the other two files in the stylesheets/ folder' one has nothing. other has a lot. we'll remove this file?? by deleting the first line of manifest (require_tree).
- refresh browser.
now no styles are being used. this allows us to use bootstrap.
-include bootstrap - in applications.css file: @import "bootstrap"; on top line above manifest.
-refresh
nothing happens
-rename the application.css file to conform to sass - rename to add .scss on the end is all.
-delete the first.
-now can delete rest of manifest. why?
-save and refresh
new style!
-style page -
bootstrp gives us styels.
-open views/noms/index in h1 tag - class = “page-header”, save, rfresh
-in table tag - class = “table table-striped”, sv rf,
-make links look like buttons - in link_to destroy button - after } - , class: ‘btn btn-danger’ which makes it a button and a red button. sv rf,
-move button at bottom to top by just moving line to top of page.
-turn into button - after new_non_path, ‘btn btn-success’. btn makes it button, the 2nd makes it green.
-move this button to right - after btn-success - pull-right
-move it away from edge - go to application file in layouts/, make <section> tag around the yeild and in it - class = “container”. this moves it in.


- vid after mbreak - more on bootstrap nom site, pagination,
CHALLENGE:
-Create a static home page
-Create a global navbar in your layout
-Add a link to the home page
-Add a link to the noms page
-Fix the style on the show page
-Fix the style on the edit / new pages
-jasoncarter@outlook.com

Monday June 16, 2014 Day 20
—————————— APPLICATION PLANNING ——————————
-Start with a name. Understand what problem you’re trying to solve! You should be able to go to anyone and say “The name of my app is ….  and the goal of it is ….”. Consider writting down and memorizing a mission statement. Start with an MVP, Minimum Viable Product, which is the absolute most basic app you could build that works, so you can test it. An MVP isn’t pretty and doesn’t do much but it works on a very basic level. Application versions have 3 numbers. ie. M.m.b. 2.1.2. The first # is Major version. Beta is where just a few pple use it but it’s not official or public. Start by creating a feature list of all possible features. Number or mark them. Then create and MVP list. Then put time frames to eveything. Once you have the features, then we start building code. We ask:
-What are our Models? ie. user. So what are all the different aspects of “user”? ie. name, email, active or not etc. Then determin the field type for each of those. ie. string, string, boolean etc. We can see that objects are relational so we’ll need a relational DB. Therefore we’ll need Rails. So our tools list will be rails, ruby etc. Then we go to things like what controllers we’ll need etc. We’ll also then go to what the interface will look like. Use balsamiq.com for wireframing.
CHALLENGE:
New app name: Theater Express
Concept: Allows you to find plays within theaters by searching theaters and see what times they are playing.
-Create feature list:
Save fav theaters
Search feature
Theater data
Enter new data
Change data
Delete data
User account
Sort

-Sort the feature list to create the MVP.
Bold above

-Sort the remaining features to create subsequent releases.
rest above

-Plan out all MVP objects (i.e. models and attributes)
Theater DB:
 -Theater info: name, location, list of plays,
Play DB:
 -Play info: name, time, description, theater, length,
User Act:
 -Name, user name, pw,

-Gather list of tools needed to build MVP
 Rails DB, html,

-Discuss UI and user flow with mocks.
Website: simple blog format list style of Theaters with plays listed under them with data under them.
Admin page: Form with Title, location, Times, descriptions for both Theaters and plays.



Friday June 13, 2014
-Use
validates :name, prsences: true
validates :email, uniqueness: true
validates :password, min_length: 6
to help validate?..

-Vid all morning

Thursday June 12, Day 18
-put resources :products inside of routes.rb inside of config folder.
-then rake routes in term.
-vid 10:36 for explanation of what rake routes does.
—————————— rake routes ——————————
-get-get a resource.
-post-post a new resource.
-patch - taking a resource and updating it a bit.
-put-your updating the entire resource itself.
-this is called REST. representation state transfer. google it.
-prefix-is a prefix to a method that will return a string to the pattern. the _path or _url that will return the URI Pattern. If the uri has a pattern and the variable (ie.:id) is not optinal, you have to supply the variable for taht uri pattern cuz rails doesn't know which id pattern ur talking about.

-pushed to github using git push origin develop. * also set up a branch on github called develop. review that.
- any action that do a git, those actions should reflect a view.
- rails s to boot up server.
-go to localhost: 3000/products/

-for erb comments use: use a ruby comment '#' to comment out inside of of the erb tags instead of the equals.
-use raise to raise an error and as a method to debug. it stops the application at this point.
-putting 'private' in your products_controller file means that all methods below that are methods and not actions and are not public and can only be instantiated insdie the class.
-product idea for hackathon: class feedback tool.
- review all morning until 2:20 pm of June 12, 2014.
CHALLENGE:
-Create a new rails application called student_union.
-Generate a Student model with a name and course attributes.
-Create and migrate your database.
-Generate a Students controller with index, show, new and create actions.
-In your students views folder create show, new, and index views.
-Edit your routes file so that your student views are accessible. (Resources)
-Edit your views:
 -The index view should list all of the Students with their name and course. The index view should also have a link to your new view, and each student should have a link to their show view.
  -The new view should have a form for creating a new student.
  -The show view should show the selected student with their name and course.
**notes:
Student vs Students
Model should be Student
 - student.rb
Controler should be Students
 - students_controller.rb
 - in that file: StudentsController
Views folder should be Students

-Set the root of your site to be the students/index page.
-In your model, validate the presence of the name and course attributes.
-Update your controller with the edit, update, and destroy actions. You'll need to look this up as we haven't covered it, but it's pretty straight forward.




Wednesday June 11,  Day 17
-Vid: first 15 min-review of Joining tables.
—————————— MODELS (from mvc) ——————————
-The name of your model will be the singular version of soemthing.
A model is just a ruby class. the attributes in a model describe the characteristics of the model.
Each attribute has a format to it.
Vid on creating table in rails: 915am
-Don't mix ruby with raw sequal.
-to
challenge:
-create additional trainers
t = Trainer.create(name: 'Guido')
-add animals to trainers
d = Animal.new(name: 'Doogy', breed: 'Poog', species: 'Dog', age: 4, birthday: 7.years.ago, trained: true)

a1 = Animal.first

To put students into Students table
go into rails console ("rails c" from irb) and type:
Student.create(:first_name => 'Jason', :last_name => 'Carter', :state => 'Washington', :favorite_color => 'Purple')


Challenge:
-Create a Student model called student with first_name, last_name and state
from sandbox2 folder:
rails g model Student first_name last_name state

Challenge:
-Create a migration that adds a favorite_color column to your student table.
rails generate migration AddsFavoriteColorToStudents favorite_color:string
(a new file should now show in your migrate folder in db folder in sandbox folder)
-

—————————— CREATING A NEW APP IN RAILS ——————————
Steps:
1.Create new projects/app:
In terminal, from the directory you will crate it in(ie.sandox) type:
rails generate model Model_name first_name last_name state

7. Scaffold.
In term type: "rails generate scaffold "Name" (use capital, ie 'Tasks') : 'string' and repeat for wanted items. ie:
rails generate scaffold Task name:string date:string importance:string
8. Rake.
In term type: rake db:migrate in the direcotry your file is in. Should see..?? == 20140610002740 CreateAddresses: migrating ==================================
-- create_table(:addresses)
   -> 0.0021s
== 20140610002740 CreateAddresses: migrated (0.0022s) =========================
(this syncs rails with the server)
9. goto to routes.rb file in the config folder  and type in "root "tasks#index"" below the current code with "tasks" being the word after resources above. - this makes "tasks your homepage"
10. restart server by typing 'rails s' in the term while in the directory.
11. go to url and do localhost:3000 and should be there.
12. Stop the app from running by hitting control+c in the terminal.
13. CD .. out of your app's directory.
14. delete the app and do it again by typing "rm -rf my_task_app/" into the terminal.


-Use rake db:rollback to rollback a mistake.

Tuesday June 10, 2014 Day 16
—————————— SQL ——————————
FACTS:
Steps:
-make sure postgres elephant is running.
-From terminasl run: psql -d elephant "your_database" - this is a
- leave the console with a "\q"
- to see what tables exits: \d
-we must always set our table name as singular cuz rails makes it plural.
-schema_migrations -
-to describe a table: "\d 'animals'"
-Modifiers are...
-Not Null is the first modifier and can never be null. The ID field can never be null. we can add 'not null' to any column we want.
-The 'default nextval' looks up what's in () to the right and looks to see what the last ID was, increments it by one and sets it as the default. We won't be using this method.
-character varying(255) means it can take any type of characters up to 255.
Do some querying:
-If want to see all of the date: "select * from aminals;". Really means "select all of the columns from the aminals". or "I want to return eveyr column that matches my query". so by not specifiyign anything, it returns everything.
-in sql these are main 4 commands: C R U D - Create, read, update, delete.
-the select above is a read.
-Do: "select * from aminals where id=3;" to return all of the columns that match this query which is id of 3.
-sometimes in documentation, you'll see the sql commands in all caps like: SELECT * FROM aminals WHERE id=3;
-when searching for a string use single quotes:
-use "like" to search something generally.
-use % at the end of Class to allow anything after this word.
-Can also put it at the front which means, we know what end means. ie. %Aminal.
-and can put on either side when you only know what's in the middle somewhere.
-this equery is case sensative.
-you can alter data and query that changed data - ie. use "lower" to put namesinto lowercase.
-to know how many records match our query:
-to return specific values: select name from aminals or select age from aminals;
-elephant_development=# select name from our aminals where age >= 3 and age <= 5;
- select name from aminals where lower(species) = '%species%';
- select created_at from aminals; - to find when records where created.
-to query time stamps: select name from aminals where extract(hour from created_at) < 10;
-select id, name from aminals where extract(hour from created_at) < 10;
-created_at and updated_at get inserted by railsby :
elephant_development=# update aminals set created_at=now(), updated_at=now() where id=12;
- \d cars describes the table for us.
-Two types of keys: Primary & foriegn.
STEPS TO CREATE A NEW TABLE:
elephant_development=# create table cars(
elephant_development(# id bigserial primary key,
elephant_development(# make varchar(20) not null,
elephant_development(# model varchar (20) not null,
elephant_development(# year integer,
elephant_development(# condition text,
elephant_development(# for_sale boolean defalut true,
elephant_development(# created_at timestamp,
elephant_development(# updated_at timestamp
elephant_development(# );

Add a new car:
insert into cars(make, model, year, condition, for_sale, created_at, updated_at) values('bugatti', 'one', 2015, 'good', true, now(), now());

How many cars total do I have?:
select count(*) from cars;

How many cars do have that are older than 2005?:
select make, model from cars where year < 2005;

USE IT WHEN:


EXAMPLE:


CHALLENGE:
-Create a table with everyone's info in it from class.
-find everone who's last name begins with V:
select * from students where last_name like 'V%';
-Everyone from the state of Utah:
select state from students where state = 'Utah';
-Everyone with fist name David:
select first_name from students where first_name = 'David';

-In your Aminals table, create a student_id column.
alter table aminals add column student_id integer;

-Add your student_id to one of the cars:
update aminals set student_id=6 where id = 15;

Join
 -Join the students and cars table with the student_id foreign key.
select name, breed from aminals inner join customers on aminals.id = customers.aminals_id;



-Add a birthday column to the students table.
alter table students add column birthday timestamp;

-Upate each student with their birthday as a datetime.
update students set birthday='1993-04-19'::timestamp where id=1;

Selecting all students who were born April 19th, 1993.

extract(year from birthday)

-To delete a table:
drop table cars

-Selecting all student who were born before 1980.
select * from students where extract(year from birthday) < 1980;

-Select all students born after 1985.
select * from students where extract(year from birthday) > 1985;

-Select all students born in October.
select * from students where extract(month from birthday) = 10;

-Select all students named David who were born after 1988.
select * from students where extract(year from birthday) >1988 and first_name = 'David';

-Select all students who were born between 1980-1990.
select * from students where extract(year from birthday) between 1980 and 1990;

-Select all students named Jason, Justin and David using an array.
select * from students where first_name IN ('Jason', 'Justin', 'David');

-Delete birthday column.
alter table students drop column birthday;

-Delete Jason row.
delete from students where first_name = 'Jason';

-Delete your state.
update students set state = '' where id = 6;


Group by:
-In a GROUP BY statement only distinct values are shown.
-Give a count of how many of each first names there are, by first name.
select first_name, count(state) from students group by first_name;

Where:
-Specify the condition or predicate.
-Kind of like an if statement, your trying to describe something where it's either true or false only.
select * from students where state = 'Virginia';


Monday June 9, 2014 Day 15?
—————————— DATA STORAGE ——————————
FACTS:
-Review database videos from lynda.com
-3 places for Data: File system, Memory & Databases.
-File system is more local and temp. It's slow. yaml files are stored on files system. normal text files etc.
-Memory is also shorterm but is fast.
-Databases- Is a program and is saved like a program. The files that a database creates are not flat files like on a file system so they are more efficient. The most stable way to store data and most secure.
-Sometimes you'll use a combination of these 3 to store data or all 3.
-Some database types:
SQL (structured query language)
-SQL is acutlaly a programmig lagnuages.
NoSQL databases are NOT RELATIONAL. You can't tie them together so you have to do 2 seperate queries and get 2 datasets. NoSQL databases are really fast cuz their optimized for reading data. So they're good to use when your reading data that isn't relational.
Graph-Java heavy. Not a sql and not a nosql. they are unique. (New4j, Oracle Spatial, Titan)
-A node is a circle. An Edge is  a line. Edges connect to lines.

-Programs used to access DBs are:
-MySQL- old, original big boy. Lots of people use it.
-PostgreSQL ("postgres")- new kid on block.
-SQLite3- We've been using this for our Rails stuff. Small and lighter.
-SQLServer-A Microsoft product. Used for large enterprise, ASP type programs.
hw-read up on sql and mysql a bit online. and postgresql as well.
-More on PostgreSQL:
-Has a lot of features that mysql doesn't have.
HStore- is a giant Hash. a big key/value store. It lives in memory so you can put stuff in and out of it superfast so you can cache ur application which is fast so u can have more users using it.
GIS Geospatial- lets you use location.
Full-text search-

-Created a new rails app:
—————————— Josh left: ——————————
Animal
-Rails gives us an "ID" and "updated_at" and "created_at" fields/columns by default. This is great info to have.
-Call .save to save our cat info
-Use a = Animals.first to retrieve our first line in our table.
Class challenge:
add 9 more aminals:
1. create a new aminal by: frog = Aminal.new
then create it's attributes by:
frog.name = "something here"
frog.age = 2
frog.breed = "something here"
etc

-rails new <elephant> -d postgresql ('elephant' will now show up as a new folder in your projects directory)
From the "elephant directory" - rake db:create
From the "elephant directory" - rails generate scaffold Animal name:string etc..
- rails console (starts the rails console?)
- cat = Animal.new
- cat.breed = "fat"


-resources: dochub.io for getting documentation
-join js meetups and html

———————— ATOM HOTKEYS ————————
Hotkey erb shortcuts
control shift .

Toggle command palette
shift + ⌘ + p

Show available auto-completions
ctrl + space

Use selection for find
⌘ + e

Tab a selection
command [ or ]

Indent/outdent the current line
⌘ + ] / [

Insert new line before the current line
⌘ + shift + enter

Delete text to beginning of word
option + backspace

Delete the current line
ctrl + shift + k

Duplicate the current line
shift + ⌘ + d

Join current and next lines
⌘ + j

Select the current word/token
⌘ + d

Select the current line
⌘ + l

Select to beginning/end of word
option + shift + left/right

Select to first/last character of line
shift + ⌘ + left/right

shift + ⌘ + up/down
Select to top/bottom of document


Day 14 - June 6, 2014
————————HOW THE INTERNET WORKS ————————
hyper text transfer protocal, domain name system etc. See June6 vid hr1

FACTS:
RDBMS - Relational Database Managemnt System - a place to put your data. Looks like a spreadsheet.
NGINX - web serber program and take raw html, js, css etc and giving it to browser. web server sits between rails and the website. nginx is like our webbrick that we're using now. apache and others are other servers.
-when you visit a webpage, ur downloading all the files.
-resources: dochub.io for getting documentation
-join js meetups and html
-sinatra is a dsl for creating mini programs. rails is a full-stack web application framework.
-rails has a way to talk to a database but sinatra does not.
-REPL -  stand for read, evaluate, print, loop. irb, js console and pry are all
-other MVC framworks:
NodsJS(express, sails), python(cake, fuel, symphony, kohana)
-MVC - Model View Controller - It's just organization. Where to put your code so it will work well.
-CoC - Convention over Configuration - rails wants you to do things a specific way, all of us, and get the same results.

—————————— SCAFFOLD ——————————
-scaffolding generates a lot of stuff for you that you would normally have to do it by hand. we'll be doing more by hand later.
-it's a way to do a quick protocal but is very unsecure.

———————— SETTING UP RAILS (Jeremy's slide)————————
FACTS:
-went through all files required to set up a new program. see vid h3.

Jeremy's notes:
Prototyping in Rails (ie.making a new basic site)
1.Make a new rails app called “my_task_app” by typing "rails new my_task_app" into terminal
2.Go into the directory by typing "cd my_task_app
" into the terminal.
3.Generate your model and views with a scaffold by typing "rails generate scaffold Task name:string description:text completed:boolean (or whatever you want your program to do/be)" into the termial.
3. sync the database with your rails changes by typing "rake db:migrate" into your terminal.
4. boot your rails server by typing "rails server" or "rails s" into your terminal.
5. In your browser, typing in "open http://localhost:3000/task(or whatever you named your class in step 3)"
6.Stop the app from running by hitting control+c in the terminal.
7. CD .. out of your app's directory.
8. delete the app and do it again by typing "rm -rf my_task_app/" into the terminal.


———————— SETTING UP RAILS (My notes)————————
Facts:
Steps:
1.Create new projects/app:
in terminal: rails new 'project_name' (what does this do? What will you see if successful or not?)
2.Set up version & gemset files in the new directory:
in term (in the directory) or in atom - create new files: .ruby-version and .ruby-gemset. In term - type "atom .ruby-version" and "atom .ruby-gemset"
3. In the ruby-version file put in the ruby version "2.1.2"
4. In the ruby-gemset file put the name of the file ie. "todo"
5. Cd out and then back in .
Will see something like this:
ruby-2.1.2 - #gemset created /Users/user/.rvm/gems/ruby-2.1.2@todoapp3
ruby-2.1.2 - #generating todoapp3 wrappers...........
(what is this? what r u doing really?)
6. bundle.
type: "bundle" in the terminal.
At the end should see something like this:
Installing sqlite3 1.3.9
Installing turbolinks 2.2.2
Installing uglifier 2.5.0
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
Post-install message from rdoc:
Depending on your version of ruby, you may need to install ruby rdoc/ri data:

<= 1.8.6 : unsupported
 = 1.8.7 : gem install rdoc-data; rdoc-data --install
 = 1.9.1 : gem install rdoc-data; rdoc-data --install
>= 1.9.2 : nothing to do! Yay!
7. Scaffold.
In term type: "rails generate scaffold "Name" (use capital, ie 'Tasks') : 'string' and repeat for wanted items. ie:
rails generate scaffold Task name:string date:string importance:string
8. Rake.
In term type: rake db:migrate in the direcotry your file is in. Should see..?? == 20140610002740 CreateAddresses: migrating ==================================
-- create_table(:addresses)
   -> 0.0021s
== 20140610002740 CreateAddresses: migrated (0.0022s) =========================
(this syncs rails with the server)
9. goto to routes.rb file in the config folder  and type in "root "tasks#index"" below the current code with "tasks" being the word after resources above. - this makes "tasks your homepage"
10. restart server by typing 'rails s' in the term while in the directory.
11. go to url and do localhost:3000 and should be there.
12. Stop the app from running by hitting control+c in the terminal.
13. CD .. out of your app's directory.
14. delete the app and do it again by typing "rm -rf my_task_app/" into the terminal.


Day 13 - June 5, 2014
————————CLICK EVENT IN JS, DISAPPEARING JS IMAGE ;EB
FACTS:
-MUST SET EVENT Listeners up when page loads so it tells the page that when these events happen, do something.
-This overrides something...
window.onload = function() {
  alert("Hello");
};
-from above:
#window refers to ur broswer window. it knows it's size etc.
#onload says when the window loads, the event fires and we're going to give onload (a window loading..) a new funtionality. That's the 'function' part above.
window.onload will return the reference to the function that isn't defined. This is just defining it. it doesn't run or do anything.
window.onload() this actually runs it.
-can call document.images in the interpreter to get all the images on your site.
-can say document.querySelectorAll()
-In js use "this" to ??... It means this current thing that you are.

————————FORMS ————————
FACTS:
-you can't put a child form inside of a form.
-must have a closing tag.
-this is not valid:
<div>
  <form>
</div>
<div>
  <form>
</div>
-but this is:
<div>
  <form>
  </form>
</div>


————————ACTION ATTRIBUTE ——————————
FACTS:
is:
action = ""
"method" attribute is requried = the method with which we want the data sent.
-the only two values we'll use really are "get" or "post".
-use Get to get information from server and Post to post info.

USE IT WHEN:

EXAMPLE:
<form method="get" action="search form">
</form>
CHALLENGE:

————————ELEMENTS INSIDE OF FORMS ;EB
FACTS:
-input, select, button, textarea are tags: ie: <input>
-input has types- hidden(hidden from you), text, password, radio, checkbox options.
-Then text has types- email, number, url etc options.
-input are self closing
-params is data sent through forms. for us to know the value of the info in a field thought, it has to have a name or a key. the key has a value. so you use the "name" attribute in the form tag to do this.
-let's debug using pry by putting pry in gem file.
-anytime you update a gem file, you have to bundle!
-put in binding.pry in file??..
-can't duplicate the 'name' attribrute in a form element.
-in js, 4things return false - false, nil, undefined & zero
-anytime u view a webpage, you are doing an http 'get'.
-u should never use the back button cuz it keeps the errors that were there before.
-textarea tag does need to have an end tag!


USE IT WHEN:

EXAMPLE:

CHALLENGE:
1. Add these form elements
-at least 2 checkboxes
-at least 2 radio buttons
-1 password field for a secret message
-1 more select tag
-1 more textarea tag
-1 more normal text input tag
1.5 when the form is submitted, make all the data display on the about page
2.style all the form elements to make them look nice. ADD CSS
3. Add some js validation to prevent the name field from being empty.

-------------reddit brian holt------
-contribute github




May 30, 2014
————----------—RUBY-------------------
-CRuby is built in C. JRuby is built in Java and runs on the JVM.
-One of Ruby's downsides is poor memory managment and it's speed at large sizes.
-Rubinius is built in Ruby.

---------—————-DEBUGGING---------------
WHAT IT IS:
-See day 9 video. May 30, 2014
-It will be very common to use the raise command to debug.
-Debugging tools - pry is one.
-To set up a gem for a program: create a file in that directory called 'Gemfile' with a capital G and put something like the following in it:
source "https://rubygems.org"
gem "pry"
-u bundle every time add a new gem.
-put 'binding.pry' into your code to have binding use the gem 'pry' to run and debug cool stuff.
-make sure to bundle from the terminal from the directory your in simply by typing "bundle"

USE IT WHEN:
-setting up a new file.

CHALLANGE:
1.open up tictactoe app
2.add a gemfile by going to Atom/ file/ new/ give it the name "Gemfile" with a capital "G"/ save it/
3.add in the "pry" gem by typing in : source "https://rubygems.org" and on the next line: gem "pry"
4.require "pry" in your game setup by typing " require "pry" " on the top line.
5.use the binding.pry at some point in the game and play with pry by typing" "binding.pry" somewhere in your code and watch what happens when you run it.
—————————— SINATRA ——————————
Day 10. Monday, June 2nd
FACTS:
Steps:
1.mkdir a sinatra folder in projects with a my_first_site folder in it.
2. cd into it.
3.open atom and create a Gemfile with a cap in the my_first_site folder.
4.type: source "https://rubygems.org" on first line and: gem 'sinatra' on the second.
-These next two files are specific to RVM (Ruby Version Manager) which allows us to manage which versin of ruby we're using on a program.
5. create a new file in atom in teh same folder called .ruby-version and type: 2.1.2 on first line and save.
6. create another new file in ataom in the same folder called .ruby-gemset and type: "my_first_site" on top line and save.
-We'll create a Gemfile, .ruby-getset and .ruby-version for every new app/program we build.
7. Tell RVM that we want to use something specific. CD .. out of the directory and cd back in. RVM prints out some stuff to us. This only happens the first time we do this. There is are no gems yet so type in: bundle into term and it will bundle all of our gems. Will show 'your bundle is complete'. typing:gemlist in term will show all gems installed including sinatra. This will create a Gemfile.lock in the same folder.
8.Make at new file called site.rb in the same folder. this is our ruby file.
9. Since we're going to be using sinatra gem, we type: require 'sinatra' on the top line. And since sinatra uses a dsl, we're going to use the dsl by typing below this:
get '/' do    #this is an http verb get that allows us to go to '/'
  'yay! my first site'
end
-That allows us to acces Sinatra's dsl and use it to run Sinatra code.
10.Run the program by typing in the term: ruby site.rb and you should see "Sinatra has taken the stage on 4567 (or something) for development..." in the term. Running our program starts up Sinatra. Sinatra has a little mini webserver and when it starts, it boots up this server and sets it to the number 4567. The server is now runnign in the term and the report we see in the term is a log file for our program. To stop the server from running hit: control c in the term. If you refresh broswer now, it will give an "unable to connect" error cuz the server isn't runnign and can't compile the website.
11. type: localhost:4567 into a browser url.
12. In the site.rb file type:
get '/first' do
  'another page on my site'
end
13. kill the server and restart it so it can see our new code. do this by control c in the term and cd back into our file. ANYTIME WE MAKE CHANGES TO OUR CODE IN OUR .RB FILE WE HAVE TO RESTART OUR SERVER (BY HITTING CONTROL C AND CD ING BACK INTO FILE)
14. go back to browswer and type in: /first after the "localhost:4567" and it should take you to our new page.
-We want to be able to have our own html file to put all of our html into and have sinatra render it from there so do the following:
15.Add folder called views inside of our my_first_site folder. This is were we put all of our html files.
16.Inside of the views folder create a new file called index.html
17. type something like  <h1> look ma! </h1> in this index.html file.
18.To tell Sinatra which templating engine to use, we go to the site.rb file and replace the 'yah! my first site' in the first get statment with: erb :index, giving it the name of the file we want it to load.
19. but then we have to rename our index.html file to index.erb so Sinatra can read it and it will treat it like it's html. erb stands for embedded ruby. erb tags look like <% %>. They can be used to DO something or PRINT something. The code to print looks like this <%= %>.
19. reboot server using instructions from above and refresh website to see new html.
20. to create other pages, create new erb files in the views foler, put the name of them into the .rb file so it links to them and restart server.


USE IT WHEN:


EXAMPLE:


CHALLENGE:



—————————————— May 29, 2014 Day 8——————————————
GITHUB
-Use git add -A to add all files in a folder at once.

FILE I/O
-gets and puts is basic file i/o stuff
-In ibr:
"Dir.pwd" returns what "pwd" would return in but as a string. This also makes it dynamic instead of static and it makes it easier to require files.
-Dir.glob("*.rb") returns an array of file names so we can iterate over these file names and then do "require" on one of the files.
-we can run "ls" in ruby have to tell it that it's a ruby command and not a system command: system("ls").
-can also do it for pwd and other common commands.
-use backtics `` for shorthand. `ls`
-fun: `say -v
-fun: do name = Kenny then `say -v "Hello #{name}"
-http://apidock.com/ruby/Dir for reference
-Dir.chdir is same as doing "cd" in terminal.
-"File" - File.exists?("car.rb") tell me if a file currently exists in the currently directory.
-Dir.exists?("some_director") tells u if a dir exists or not.
- http://apidock.com/ruby/File for info on "File."
-Create a new file:
new_file = File.new("first_file.txt") give u an error cuz ur computer needs to know the type of mode for creating a file. online ref: http://apidock.com/ruby/IO
So use: File.new("first_file.txt","w+") which puts us in the right mode and returns an instance of the file..?
-new_file.write("hello") writes text to the file? the return value will be the number of bytes written to the file.
-When you open a file, you have to close it when ur done. Use: new_file.close to do this.
-To read each line indiviually and returned seperately use a Ruby built-in method File.readlines. ex: File.readlines("first_file.txt"). Then assign it to a variable like: line=File.readlines("first_file.txt"). Then do lines.eac do |line| then puts line.upcase and end to print out.

YAML FILE TYPES
-Is a plain text file that has a specific structure to how you format ur text.
-yml files aren't really a ruby thing. php, pytheon all interact with yml files. it's just a plain text file.
-To use a yaml parser, use require 'yaml'
-This to get a hash:
2.1.2 :003 > YAML
 => Psych
2.1.2 :004 > YAML.load_file("contacts.yml")
 => {"contacts"=>[{"name"=>"Kenny", "hobby"=>"coding"}, {"name"=>"Linda", "hobby"=>"loving Kenny"}, {"name"=>"Ar", "hobby"=>"bugging Bella"}, {"name"=>"Bella", "hobby"=>"teasing Ari"}]}

-When we write to a file, we're using a string.

—————CHALLENGE
-Create an address book in ruby.
0. write a program called "friends.rb"
1. create a hash with some information about your neighbor, and yourself.
2. create a new yaml file called "friends.yml"
3. write that hash to the yaml file. *note be sure to close the file.
4. Running "ruby friends.rb" should generate this file.
Mine:
# 0. write a program called "friends.rb"
require 'yaml'
# 1. creaet a hash with some information about your neighbor, and yourself.
#friends = {"neighbor" => "alien", "kenny" => "president"}
my_array = [
  {name: 'jeremy', age:32},
  {name: 'ty', age:27}
]

# 2. craet a new yaml file called "friends.yml"
#File.new("friends.yml" "w+")
new_file = File.new("friends.yml", "w+")

# 3. write that hash to the yaml file. *note be sure to close the file.
#YAML.load_file("friends.yml")
new_file.write(my_array.to_yaml)
new_file.close

# 4. Running "ruby friends.rb" should generate this file.

#better way:
# File.new("friends.yml", "w+") do |f|
#   f.write(my_array.to_yaml)
# end

---GEMS:
rubygems.org
in terminal use: gems list to see all gems u have. use gem -v for version.

-----INCRYPTION


/*—————————————— May 28, 2014 ——————————————*/
TERNARY OPERATOR:
x = 4
y = 5
x < y ? "yes" : "nope"
-Could also store it in a variable like:
result = x < y ? "yes" : "nope"
-And this is why you can't put a "?" at the end of a variable. Ruby thinks ur trying to use a turnary operator.

CLASSES REVIEW:
-The whole reason we have classes is becasue the allow us to put down our thoughts into code in a more organized fashion, like grouping things in a like fashion like users on a website like facebook for example a user may need to have an email and name but without a class, we can't call them a user. The email and name they just put in is not assoiated with an object, it's just two random pieces of data but if we have a "User Class" with and email attribute and a name attribute, we know that it's "User" information.

LINKING TO FILES:
- Use "require" like:
require 'date'
-if it's a file that ends in .rb, we don't need to put it as Ruby knows it.
- only need to do it once.

example with date object after we've required it.
- date.method to find out all the methods that can be used on it.
- date.to_s
- require 'net/http' to connect to internet.

MAKING NEW FILES:
- The Load Path which is an array of strings which are a path to where ruby stores all these files. so ruby knows where "date.rb" and others are located on ur machine but it doesn't know where first.rb is so we have to tell it where it is so it can load it into the array of strings.
Use "require_relative" which says the file should be close around me somewhre. As long as it's in the same directory, it'll find it.
Order of how you run the "require" files matters if there are dependencies

LOAD PATH:
$load_path? shows the array of the directories where ruby files may be.
to add our new file to the array

—————————— MODULES & MIXES: ——————————
FACTS:
-Modules can be use in two ways. 1.As a Namespace or 2. As a mixin.
-Modules are constants and are therefore capitalized.
-You can't instantiate a module.
-Modules can't inherit from anything.
-Modules provide a structure to collect Ruby classes, methods, and constants into a single, separately named and defined unit.
-When we use Moduels as a namespace, it usually means that the Classes that we're defining, the Objects that we're setting up, we're defining them inside of a Module so that when we go to instantiate that class, we instantiate it through it's namespace. When you instaniate through the Name Space, it will look like this Your_module :: Class_name.
-Namespacing is putting a class inside of a module.
-Ruby can't do multiple inheritance.
-Modules define a namespace, a sandbox in which your methods and constants can play without having to worry about being stepped on by other methods and constants.
-Can put as many methods into a module as you want.
-Ref: beginnign ruby pdf

ex:
module Transportation
  def going_forward
    puts "moving forward"
  end
end

By name spacing a Module and Class like this:
#using the module as a namespace
module Business
  class Car
  end
end

#again using the module as a namespace here.
module Vehicle
  class Car
  end
end

you can instantiate on of the "Car" classes by putting the Module name in front of it like this:
Vehicle::Car or Business::Car so:
porche = Vehicle::Car  (an object(instantiation) of the 'Car' class inside the 'Vehicle' Module)
or
Nissan = Business::Car

USE IT WHEN:
-you want to treat the two car classes totally seperately. A Namespace keeps classes of the same name seperate.


EXAMPLE:


CHALLENGE:


————————————————————

SCOPING CONTANTS:
Kenny::Person

CLASS EXORCISE:
-Do tictactoe with require method like a board.rb or a class for x or o, create new instnace of each that inherit from a player class etc.
class Player
  def wins?(marker) #this takes the marker and returns true or false



/*—————————————— May 27, 2014 day 6——————————————*/
-conditional operators are: <, >, +, = etc
-comparison operators are: &&, ||
-alternative to using an if statement is a case statement.
CREATING A METHOD:
- Start with "def":
def does_x_win
end
or:
def grab_food
  puts "grabbing food"
  puts "and it's good"
end

-Blocks of code are scopes that define everything.
-Put () next to your new defined method to make it dynamic:
def grab_food(food)
  puts "grabbing some #{food}"
end
-call this method by:
grab_food("sushi")
—————————— ARGUMENTS ——————————
-"wrong number of arguments (0 for 1)" means you didn't put in the required amount of arguments. Will also get (1 for 2) if there are two required arguments and you're only passing 1. ie grab_food ("sushi") instead of grab_food("sushi", "juice")
-Pass multiple arguments on a method by:
def grab_food(food, drink)
  puts "grabbing some #{food}"
  puts "grabbing some #{drink}"
end
-When defining a Method inside of a Class like this:
class Human
  def say(something = "food")
    puts "eating #{something}"
  end
end
you can put the above arugment 'something = "food"' in there as a default argument which will be passed in be default if you don't pass anything through.
-A common type of use of arguments is having a required parameter and a default parameter like this:
class Router
  def get(path, options = {})
  end
end
more on these advanced ways of passing various types of arguments into varios types of parameters in dpl day 10 vid 24minutes.
-The ampersand "*" in a parameter means that it is a block.

—————————— —————————— ——————————
-Variables have different scopes. Local variable are only accessable inside the block/scope where it's created.
-Making this dynamic looks like this:
meals = [
  {food: 'pizza', drink: 'beer'}
  {food: 'sushi', drink: 'sake'}
  {food: 'pasta', drink: 'wine'}
]

-Call it like this:
meals.each do |meal|
  grab_food(meal[:food], meal[:drink])
end

-Instance variables have @. ie. @meals. And they will have a larger scope and will always be available to us.
-More dynamic example with user input:
meals= []
dinner = {}

puts "Please enter in a food"
food = gets.chomp
puts "Please enter a drink"
drink = gets.chomp

dinner[:food] = food
dinner[:drink] = drink
meals << dinner

meals.each do |meal|
  grab_food(meal[:food], meal[:drink])
end

-NOW ADDING LOOP TO MAKE MORE DYNAMIC:
meals= []
dinner = {}

puts "Please enter in a food"
food = gets.chomp
puts "Please enter a drink"
drink = gets.chomp

dinner[:food] = food
dinner[:drink] = drink
meals << dinner

puts "Enter in another food? [Y] or [N]"
answer = gets.chomp

meals.each do |meal|
  grab_food(meal[:food], meal[:drink])
end
...incomplete... get full code later...

CLASSES
ex:
class Animal

end
-The naming convention for class is - only begin with a capital letter. If it has multiiple words us case like this: CrazyAnimal. Anything that starts with a capital letter is a contant. Variables can change, constants can't. A class is kind of like a Noun, a person,place,thing. It doesn't change. Methods are actions that other animals can also do.
DEFINING METHODS:
ex:
class: Animal (like the Noun)
  def run (like the verbs)
  def eat (like the verbs)
  def hide (like the verbs)

INHERITENCE
ex:
class Human < Animal
  def play_computer_games
-Animal is inheriting traits from Human.
-Other examples:
class Parent
class Child < Parent

class Boat
class Sailboat < Boat

ATTRIBUTE ACCESSORS:
class Chair
  attr_writter :color, :size, :arms, :design, :weight
  attr_reader :color, :size, :arms, :design, :weight
  attr_accessor :color, :size, :arms, :design, :weight
  end
end
-These 3 above are ways to
-attr_writter lets us ASSIGN a value.
-attr_reader lets us RETURN value.
-attr_accessor lets us do BOTH READ AND WRITE.

CREATE A NEW OBJECT OF A CLASS:
class Sandwich
pbj = Sandwich.new

2 TYPES OF METHODS:
1-INSTANCE METHODS:
-A method that you can only call on an INSTANCE of a class, not on the class itself.
ex:
String.length doesn't work because length is an "Instance" method and can only be called on an instance but we're calling it on the class String itself.

2-CLASS METHODS (or class level method):
-A methode that you run directly on the class itself.
ex:
Sandwich.new

-Types of Instance Methods are reader (def age) and writer (def name=(new_name)).
-Methods with a "?" at the end are predicate methods:
def old_enough?
-These only return true or fasle. ie. the .empty? method for arrays.

-die! is another Instance Method. This method means it will be destructive in some way. or it might modify something in some way like making a value upcase forever.

Class Instance Method:
class Human
  def self.evolve
  end

  def Human.evolve
  end

-In Ruby, everything returns a value. The return value from a method will be the last evaluated thing in that method.

-Class Methods are called on the Class itself, not the instance.

Instance Method examples:
reader method:
def age
end

writer method:
def name = (new_name)
end

predicate method:
def old_enough_to_vote?
end

destructive method:
def die!
end

Class method:
def self.evolve
  puts "evolve from monkey to man"
end


INSTANTIATION:
-Creating a new instance of an object.
-This method is called initialize.
ex:

-Review today's class morning video. May 27, 2014
Exorcise:

Class challenge:
Find an object in the class. Define it's actions & attributes.

class Laptop
  def display
  def play_sound
  def run_programs
end

class Laptop
  attr_accessor :color, :size, :speed, :design, :weight
end

-You can put anything inside of a method. examples:
def boy?
  sex == "male"
end

def girl?
  sex == "female"
end

def say_name
  puts self.name
end


Class Challenge:
# make a car object
Class Car

# the car can drive
# the direction it drives should be dynamic
  def drive(direction)
  puts "The car is driving #{direction}"
  end
end

# the car has a year, make and model attrubutes
attr_accessor :year, :make, :model

# instantiate the object
corvette = Car.new

# make the care drive.
# When driving, it should just print out twich dirction it's dirving.
corvette.drive("Super fast forward")

# Assign all the attributes a value for your car.
corvette.year = 2014
corvette.make = "Stingray"
corvette.model = 1.1

-If we tell "initialize" that it takes some set of arguments, then we can tell new that it also takes that number of arguments.
ex:
  def initialize(make, model, year)
    @make = make
    @model = model
    @year = year
  end

my_car = Car.new("corvett", "1.1", 2014)
puts "my car is a #{my_car.make} #{my_car.model} #{my_car.year}"

Class Challenge:
# initialize a git repository and add, commit, and push

# create a personal chef class
# make his name attribute accessible
# make a method called make_toast that accepts a parameter (brown, light brown, burnt, burnt black, etc)
# make a method called make_juice that accepts a parameter (orange, apple, cranberry)
# make a method called make_eggs (1,2,3, etc) and the style (overeasy, scrambled, sunnyside etc)
How do we run the code that we've written?

/*—————————————— May 23, 2014 ——————————————*/
PSUDO CODE, CONDITIONALS,COMPARISON OPERTORS, COMMENTS, CASE STATEMENT, LOOPS,

- How to create a file in atom from the terminal: First get out of irb if in it,
then type <atom "file name">
CONDITIONALS
- If some_condition
    do_stuff
  end
- False and Nill are the only two things in Ruby that equate to false.
Example if statement:
if my_age >20
  puts "Can go to club"
end

COMPARISON OPERTORS: =, =<, > +!,

CONDITIONAL OPERATORS: && for multiple "if" statements. ie:
  if x_in_space_1 && x_in_space_2 && x_in_space_3
    puts "X wins!"
  end
- || for "or"
- else equals "otherwise" in english
- use the Bang "!" symbol to make something "not" like:
  if !your_car_is_working
    hit me up for a ride
  end
- Can use the else operator inline:
  puts "let's grab lunch" unless you_already_ate

ELSIF:
  if your_grade >= 90
    puts "You get an A"
  elsif your_grade >= 80 && your_grade < 90
    puts "You get a B"
  elsif your_grade >= 70 && your_grade < 80
    puts "You get a C"
  else
    puts "You fail"
  end

COMMENTS:
# for one line and
=begin
=end
for multi-line notes. MUST be all the way to the left.

CASE:
Used when you have a lot of choices or options.
code ie:
grade = A
case grade
  when 'A'
    puts "Yay! Ice cream for you"
  when 'B'
    puts "Not too shabby"

LOOPS:
ie: while loops:
code ie:
  while nemo_is_still_lost
    puts "just keep swimming"
  end
PSUDO CODE 3 LITTLE PIGS:
Variables:
  house 1 is straw
  house 2 is sticks
  house 3 is brick
Conditions:
  if house is not brick then,
    the wolf blows it down
    say "you suck"
  otherwise
    the wolf doesn't blow it down
    say "You are made of stone dude! No rent due"
MAKE A CALCULATOR BRANCH

HW - finnish funwithnumbers

hw - finnish number.rb

TICTACTOE PSUDOCODE:
-Create a board =>
-Loop that ends after 9 turns =>
-Determine who's turn it is
  -create player1, player 2
-Player chooses a space
  -Get player input,
  -Define spaces,
  -check to see if spaces are taken.
-Define 8 winning combinations. =>
-Check to see if anyone has one. =>
-After 9 turns, if no one has won, declare a tie.

LIMITED LOOP:
turn = 0
while turn < 9
  puts turn
#need to tell turn to increase it's value here:
  turn += 1
end

can also:

HW - complete through 16 on code academy

/*—————----————— May 22, 2014 —————----—————*/
- PUtting {<someting>} in a string is called interpolation.
- when you use single quotes, it will return EXACTLY what's between them so you can use things like String Interpolation cuz it will show up.
- two other data types beyond strings and fixnums. Arrays & Hash ( {} ) & ":" which is a symbol which is usually looks like :name or :bird & Time.
- Time.now gives us info on time:
: Time.now
 => 2014-05-22 11:57:54 -0600
- Can also use Time.now.year or Time.now.minute

- symbols are used a lot in hashes.
- symbol example:
me = {
:name => "Kenny",
:age => 40,
:age => "tall",
}
puts me[:name]
- add a property to the hash like: me[:sex] = "male"
- also can use {food: 'taco'} instead of {:food => 'taco'} for brevity.
- Convention is to use lowercase for symbols.
- Arrays are collections. you can iterate Arrays which means going over it one by one.
- In ruby you can assign anything you want to a var. So you can assign arrays to a var.
- each item in an array is called an index.
- : people.each do |person|
puts person
end
- : 2.1.2 :037 > things.each do |number|
2.1.2 :038 >     puts number * number
2.1.2 :039?>   end
1
4
9
- Ruby has 4 types of variables: see other note:
- Hash data types:
storage = {"Box 1" => "Stuff", "Box 2" => "More stuff"}
puts storage["Box 1"]
- each key needs to be unique but the values can be the same. still called indexes just not zero based.
- : storage.each_pari do |key, value|
puts "The key is #{key} and the value is #{value}"
end
- apidock.com/ruby


VARIABLES, INSERTING INTO ARRAYS, HASHES

Assign: Find 5 methods for strings in Ruby: .chomp, .delete, .replace, .size, .scan
Assing: Find 5 methods for Fixnums/Integers: .even?, .zero?, .modulo, .abs, .to_s,

- use <numbers.map($:to_i) as a short way changing a string array to integers
- PUtting {<someting>} in a string is called interpolation.
- when you use single quotes, it will return EXACTLY what's between them so you can use things like String Interpolation cuz it will show up.
- two other data types beyond strings and fixnums. Arrays & Hash ( {} ) & ":" which is a symbol which is usually looks like :name or :bird & Time.
- Time.now gives us info on time:
: Time.now
 => 2014-05-22 11:57:54 -0600
- Can also use Time.now.year or Time.now.minute

- symbols are used a lot in hashes.
- symbol example:
me = {
:name => "Kenny",
:age => 40,
:age => "tall",
}
puts me[:name]
- add a property to the hash like: me[:sex] = "male"
- also can use {food: 'taco'} instead of {:food => 'taco'} for brevity.
- Convention is to use lowercase for symbols.
- Arrays are collections. you can iterate Arrays which means going over it one by one.
- In ruby you can assign anything you want to a var. So you can assign arrays to a var.
- each item in an array is called an index.
- : people.each do |person|
puts person
end
- : 2.1.2 :037 > things.each do |number|
2.1.2 :038 >     puts number * number
2.1.2 :039?>   end
1
4
9
- Ruby has 4 types of variables: see other note:
- Hash data types:
storage = {"Box 1" => "Stuff", "Box 2" => "More stuff"}
puts storage["Box 1"]
- each key needs to be unique but the values can be the same. still called indexes just not zero based.
- : storage.each_pari do |key, value|
puts "The key is #{key} and the value is #{value}"
end
- apidock.com/ruby

/*—————————————— May 21, 2014 ——————————————*/
IRB
- To get into irb  - <irb>
- 2.5 is a fixnums and is a float. a decimal is a float.
- in ruby, to get a float (decimal) use at least one decimal. ie.- 5/2.5=2.5
- Use <.class> at the end of a line to know what data type it is. ie- "kenny".class or 345.class or 2.5.class
- 5.downcase doesn't work cuz fixnums don't know how to downcase. each method only works with certain methods. fixnums don't work or udnerstand downcase. but strings know what they mean.
- "kennyT".reverse.upcase is method chaining. both can do their thing and upcase works on upcase cuz <"kennyT".reverse> becomes a new string that .upcase recognizes.
