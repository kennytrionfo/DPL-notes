
/*—————————————— May 23, 2014 ——————————————*/
PSUDO CODE, CONDITIONALS,COMPARISON OPERTORS, COMMENTS, CASE STATEMENT, LOOPS,

- How to create a file in atom from the terminal: First get out of irb if in it,
then type <atom "file name">
CONDITIONALS
- If some_condition
    do_stuff
  end
- False and Nill are the only two things in Ruby that equate to false.
Example if statement:
if my_age >20
  puts "Can go to club"
end

COMPARISON OPERTORS: =, =<, > +!,

CONDITIONAL OPERATORS: && for multiple "if" statements. ie:
  if x_in_space_1 && x_in_space_2 && x_in_space_3
    puts "X wins!"
  end
- || for "or"
- else equals "otherwise" in english
- use the Bang "!" symbol to make something "not" like:
  if !your_car_is_working
    hit me up for a ride
  end
- Can use the else operator inline:
  puts "let's grab lunch" unless you_already_ate

ELSIF:
  if your_grade >= 90
    puts "You get an A"
  elsif your_grade >= 80 && your_grade < 90
    puts "You get a B"
  elsif your_grade >= 70 && your_grade < 80
    puts "You get a C"
  else
    puts "You fail"
  end

COMMENTS:
# for one line and
=begin
=end
for multi-line notes. MUST be all the way to the left.

CASE:
Used when you have a lot of choices or options.
code ie:
grade = A
case grade
  when 'A'
    puts "Yay! Ice cream for you"
  when 'B'
    puts "Not too shabby"

LOOPS:
ie: while loops:
code ie:
  while nemo_is_still_lost
    puts "just keep swimming"
  end
PSUDO CODE 3 LITTLE PIGS:
Variables:
  house 1 is straw
  house 2 is sticks
  house 3 is brick
Conditions:
  if house is not brick then,
    the wolf blows it down
    say "you suck"
  otherwise
    the wolf doesn't blow it down
    say "You are made of stone dude! No rent due"
MAKE A CALCULATOR BRANCH

HW - finnish funwithnumbers

hw - finnish number.rb

TICTACTOE PSUDOCODE:
-Create a board =>
-Loop that ends after 9 turns =>
-Determine who's turn it is
  -create player1, player 2
-Player chooses a space
  -Get player input,
  -Define spaces,
  -check to see if spaces are taken.
-Define 8 winning combinations. =>
-Check to see if anyone has one. =>
-After 9 turns, if no one has won, declare a tie.

LIMITED LOOP:
turn = 0
while turn < 9
  puts turn
#need to tell turn to increase it's value here:
  turn += 1
end

can also:

HW - complete through 16 on code academy



/*—————----————— May 22, 2014 —————----—————*/
VARIABLES, INSERTING INTO ARRAYS, HASHES

Assign: Find 5 methods for strings in Ruby: .chomp, .delete, .replace, .size, .scan
Assing: Find 5 methods for Fixnums/Integers: .even?, .zero?, .modulo, .abs, .to_s,

- use <numbers.map($:to_i) as a short way changing a string array to integers
- PUtting {<someting>} in a string is called interpolation.
- when you use single quotes, it will return EXACTLY what's between them so you can use things like String Interpolation cuz it will show up.
- two other data types beyond strings and fixnums. Arrays & Hash ( {} ) & ":" which is a symbol which is usually looks like :name or :bird & Time.
- Time.now gives us info on time:
: Time.now
 => 2014-05-22 11:57:54 -0600
- Can also use Time.now.year or Time.now.minute

- symbols are used a lot in hashes.
- symbol example:
me = {
:name => "Kenny",
:age => 40,
:age => "tall",
}
puts me[:name]
- add a property to the hash like: me[:sex] = "male"
- also can use {food: 'taco'} instead of {:food => 'taco'} for brevity.
- Convention is to use lowercase for symbols.
- Arrays are collections. you can iterate Arrays which means going over it one by one.
- In ruby you can assign anything you want to a var. So you can assign arrays to a var.
- each item in an array is called an index.
- : people.each do |person|
puts person
end
- : 2.1.2 :037 > things.each do |number|
2.1.2 :038 >     puts number * number
2.1.2 :039?>   end
1
4
9
- Ruby has 4 types of variables: see other note:
- Hash data types:
storage = {"Box 1" => "Stuff", "Box 2" => "More stuff"}
puts storage["Box 1"]
- each key needs to be unique but the values can be the same. still called indexes just not zero based.
- : storage.each_pari do |key, value|
puts "The key is #{key} and the value is #{value}"
end
- apidock.com/ruby

/*—————————————— May 21, 2014 ——————————————*/
IRB
- To get into irb  - <irb>
- 2.5 is a fixnums and is a float. a decimal is a float.
- in ruby, to get a float (decimal) use at least one decimal. ie.- 5/2.5=2.5
- Use <.class> at the end of a line to know what data type it is. ie- "kenny".class or 345.class or 2.5.class
- 5.downcase doesn't work cuz fixnums don't know how to downcase. each method only works with certain methods. fixnums don't work or udnerstand downcase. but strings know what they mean.
- "kennyT".reverse.upcase is method chaining. both can do their thing and upcase works on upcase cuz <"kennyT".reverse> becomes a new string that .upcase recognizes.
